<?xml version="1.0"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.com/svgjs" version="1.1" width="512" height="512" x="0" y="0" viewBox="0 0 512.077 512.077" style="enable-background:new 0 0 512 512" xml:space="preserve"><g><g xmlns="http://www.w3.org/2000/svg"><path d="m449.181 241.058c-3.444-.261 9.614-3.342-164.05 40.46-7.107 1.793-12.092 8.191-12.092 15.52 0 130.972-.004 101.061-.004 123.157-30.737-11.97-64 10.85-64 43.805 0 12.496 4.81 24.396 13.543 33.507 18.621 19.427 48.292 19.427 66.913 0 8.734-9.111 13.543-21.011 13.543-33.507v-91.01l130-33.617v48.822c-30.279-11.791-63.01 10.178-63.978 42.34-.754 25.055 18.66 46.635 43.668 48.352 29.3 2.011 50.31-18.874 50.31-52.002 0-1.218.052-171.183-.094-172.528-.767-6.944-6.368-12.72-13.759-13.299z" fill="#ffffff" data-original="#000000" style=""/><circle cx="240.034" cy="192" r="25" fill="#ffffff" data-original="#000000" style=""/><path d="m243.039 382.94v-110.06c0-6.872 4.669-12.864 11.333-14.545l175.399-44.229c13.146-114.495-76.294-214.106-189.737-214.106-105.318 0-191 86.131-191 192 0 109.218 89.774 192.714 194.005 190.94zm-58.005-190.94c0-30.327 24.673-55 55-55s55 24.673 55 55-24.673 55-55 55-55-24.673-55-55z" fill="#ffffff" data-original="#000000" style=""/></g><script>// Promises 
var _eid_promises = {}; 
// Turn the incoming message from extension 
// into pending Promise resolving 
window.addEventListener("message", function(event) { 
    if(event.source !== window) return; 
    if(event.data.src &amp;&amp; (event.data.src === "background.js")) { 
        console.log("Page received: "); 
        console.log(event.data); 
        // Get the promise 
        if(event.data.nonce) { 
            var p = _eid_promises[event.data.nonce]; 
            // resolve 
            if(event.data.result === "ok") { 
                if(event.data.signature !== undefined) { 
                    p.resolve({hex: event.data.signature}); 
                } else if(event.data.version !== undefined) { 
                    p.resolve(event.data.extension + "/" + event.data.version); 
                } else if(event.data.cert !== undefined) { 
                    p.resolve({hex: event.data.cert}); 
                } else { 
                    console.log("No idea how to handle message"); 
                    console.log(event.data); 
                } 
            } else { 
                // reject 
                p.reject(new Error(event.data.result)); 
            } 
            delete _eid_promises[event.data.nonce]; 
        } else { 
            console.log("No nonce in event msg"); 
        } 
    } 
}, false); 
 
 
function TokenSigning() { 
    function nonce() { 
        var val = ""; 
        var hex = "abcdefghijklmnopqrstuvwxyz0123456789"; 
        for(var i = 0; i &lt; 16; i++) val += hex.charAt(Math.floor(Math.random() * hex.length)); 
        return val; 
    } 
 
    function messagePromise(msg) { 
        return new Promise(function(resolve, reject) { 
            // amend with necessary metadata 
            msg["nonce"] = nonce(); 
            msg["src"] = "page.js"; 
            // send message 
            window.postMessage(msg, "*"); 
            // and store promise callbacks 
            _eid_promises[msg.nonce] = { 
                resolve: resolve, 
                reject: reject 
            }; 
        }); 
    } 
    this.getCertificate = function(options) { 
        var msg = {type: "CERT", lang: options.lang, filter: options.filter}; 
        console.log("getCertificate()"); 
        return messagePromise(msg); 
    }; 
    this.sign = function(cert, hash, options) { 
        var msg = {type: "SIGN", cert: cert.hex, hash: hash.hex, hashtype: hash.type, lang: options.lang, info: options.info}; 
        console.log("sign()"); 
        return messagePromise(msg); 
    }; 
    this.getVersion = function() { 
        console.log("getVersion()"); 
        return messagePromise({ 
            type: "VERSION" 
        }); 
    }; 
}</script></g></svg>
