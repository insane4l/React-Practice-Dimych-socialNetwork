{"version":3,"sources":["components/common/pagination/pagination.tsx","components/app/pages/usersPage/user.tsx","components/app/pages/usersPage/usersList.tsx","utils/transformFuncs.ts","components/app/pages/usersPage/usersSearchForm.tsx","components/app/pages/usersPage/usersPage.tsx","components/app/pages/chatPage/chatForm.tsx","selectors/chat.ts","components/app/pages/chatPage/chatPage.tsx","selectors/dialogs.ts","assets/icons/profile-icon.svg","assets/icons/users-icon.svg","assets/icons/dialogs-icon.svg","assets/icons/news-icon.svg","assets/icons/music-icon.svg","assets/icons/chat-icon.svg","assets/icons/settings-icon.svg","assets/icons/like.svg","assets/icons/comments.svg","assets/icons/share.svg","assets/icons/add-photo-icon.svg","assets/icons/go-back-arrow.svg","assets/icons/left-arrow.svg","assets/icons/right-arrow.svg","services/dialogsAPI.ts","reducers/dialogsReducer.ts","selectors/users.ts","reducers/profileReducer.ts","services/usersAPI.ts","components/common/errors/requestError.tsx","components/common/spinner/spinner.tsx","components/common/spinner/index.js","components/HOCs/withRedirect.tsx","reducers/usersReducer.ts","assets/images/main-logo.svg","assets/images/defaultCover.jpeg","assets/images/defaultPhoto.png","assets/images/ads-img.jpg","services/authAPI.ts","reducers/authReducer.ts","reducers/appReducer.ts","components/app/navBar/newMessagesCounter.tsx","components/app/navBar/navBar.tsx","components/app/navBar/index.js","components/app/header/mobileMenu.tsx","selectors/app.ts","components/app/header/index.js","components/app/header/header.tsx","components/app/friendsBlock/friendsBlock.tsx","utils/getValueFuncs.ts","components/app/friendsBlock/index.js","components/app/adsBlock/index.js","components/app/adsBlock/adsBlock.tsx","components/app/sideBar/sideBarBlock/index.js","components/app/sideBar/sideBarBlock/sideBarBlock.tsx","components/app/sideBar/index.js","components/app/sideBar/sideBar.tsx","utils/validation/validators.ts","components/common/formsControls/formsControls.tsx","components/app/pages/loginPage/loginPage.tsx","components/app/pages/loginPage/index.js","selectors/profile.ts","components/app/pages/profilePage/postsTimeline/post.tsx","components/app/pages/profilePage/postsTimeline/postAddForm/postAddForm.tsx","components/app/pages/profilePage/postsTimeline/postAddForm/index.js","components/app/pages/profilePage/postsTimeline/index.js","components/app/pages/profilePage/postsTimeline/postsTimeline.tsx","components/common/imagesPresentation/fullSizeImage.tsx","components/app/pages/profilePage/profileInfo/profileImages.tsx","components/app/pages/profilePage/profileInfo/profileStatus.tsx","components/app/pages/profilePage/profileInfo/profileDataForm.tsx","components/app/pages/profilePage/profileInfo/profileDataTable.tsx","components/app/pages/profilePage/profileInfo/profileData.tsx","components/app/pages/profilePage/profileInfo/profileInfo.tsx","components/app/pages/profilePage/profilePage.tsx","components/app/pages/profilePage/profilePageContainer.tsx","components/app/pages/profilePage/index.js","components/app/pages/dialogsPage/dialogsList/dialogsListItem.tsx","components/app/pages/usersPage/index.js","components/app/pages/dialogsPage/dialogsList/dialogsList.tsx","components/app/pages/dialogsPage/dialogsItem/dialogForm.tsx","components/app/pages/dialogsPage/dialogsItem/dialogsItem.tsx","components/app/pages/dialogsPage/index.js","components/app/pages/dialogsPage/dialogsPage.tsx","components/app/pages/newsPage/index.js","components/app/pages/newsPage/newsPage.tsx","components/app/pages/musicPage/index.js","components/app/pages/musicPage/musicPage.tsx","components/app/pages/settingsPage/index.js","components/app/pages/chatPage/index.js","components/app/pages/settingsPage/settingsPage.tsx","components/app/pages/pageNotFound/index.js","components/app/pages/pageNotFound/pageNotFound.tsx","components/app/mainSection/mainSection.tsx","components/app/mainSection/index.js","components/app/footer/index.js","components/app/footer/footer.tsx","components/app/app.tsx","components/app/index.js","reduxStore.ts","index.tsx","components/common/userAvatar/userAvatar.tsx","selectors/auth.ts","components/common/userName/userName.tsx","services/chatAPI.ts","reducers/chatReducer.ts","services/API.ts","components/common/buttons/messagesBtn/messagesBtn.tsx","components/common/buttons/followBtn/followBtn.tsx","components/common/messagesComponents/sendMessageForm.tsx","components/app/pages/chatPage/chatMessage.tsx","components/app/pages/dialogsPage/dialogsItem/dialogMessage.tsx","components/app/pages/dialogsPage/dialogsItem/dialogPagination.tsx","components/common/messagesComponents/messagesList.tsx"],"names":["Pagination","currentPage","totalItemsCount","pageSize","onPageSelected","portionSize","useState","currentPortion","setCurrentPortion","useEffect","selectedPagePortion","pagesCount","Math","ceil","pages","i","push","portionsCount","firstPortionPageNum","lastPortionPageNum","className","onClick","src","prevArrow","alt","filter","num","map","nextArrow","User","user","id","photos","name","followed","status","userImage","small","linkTo","userName","isFollowed","userId","UsersList","users","useSelector","usersSelectors","changingSubscriptionStatusError","dispatch","useDispatch","actions","setRequestError","u","errorMessage","getSearchTitleFromSetParameters","term","friendFilter","filter2","filter1","usersSearchFormValidators","values","UsersSearchForm","props","stateFilters","friendInputValue","friend","initialValues","enableReinitialize","validate","onSubmit","setSubmitting","onFiltersChanged","isSubmitting","type","disabled","component","value","compose","withAnonUserRedirect","totalUsersCount","isLoading","usersRequestError","filters","history","useHistory","queryString","location","search","parsedQS","qs","ignoreQueryPrefix","queryPage","Number","page","requestUsers","setFilters","pushSearchParams","P","T","F","pathname","ChatForm","sendMessage","fieldName","btnDisabled","getStatus","state","chat","getMessages","messages","Chat","chatSelectors","startMessagesListening","stopMessagesListening","messagesCleaned","chatMessages","message","getNewDialogsMessagesCount","dialogsPage","newDialogsMessagesCount","getViewedMessages","viewedMessages","getSelectedDialogMessages","selectedDialogMessages","getLoadedMessagesCount","length","getSelectedDialogMessagesCount","selectedDialogMessagesCount","getDialogInterlocuterProfile","dialogInterlocuterProfile","getDialogsList","dialogsList","getIsLoading","getNewMessagesCountRequestError","requestErrors","newMessagesCountRequestError","getSendingMessageError","sendingMessageError","getMessageStatusRequestError","messageStatusRequestError","getRequestingMessagesError","requestingMessagesError","dialogsAPI","apiBase","get","then","res","data","pageNumber","post","body","put","messageId","initialState","dialogsListReceived","payload","dialogMessagesReceived","dialogMessages","dialogMessagesCleaned","setDialogMessagesCount","dialogMessagesCount","messageSent","addMessageToViewed","delMessageFromViewed","newMessagesCountReceived","newMessagesCount","setIsLoading","interlocuterProfileReceived","profile","error","requestAllDialogsList","a","dialogs","requestDialogMessages","usersAPI","getUserProfile","items","totalCount","requestNewMessagesCount","resultCode","ResultCodesEnum","Success","sentMessage","addedAt","recipientId","senderId","senderName","translatedBody","viewed","requestMessageStatus","dialogsReducer","action","getUsers","usersPage","getTotalUsersCount","getPageSize","getCurrentPage","getUsersListFilters","getLoadingStatus","getFollowingInProgress","followingInProgress","getRandomFriends","randomFriends","getTotalFriendsCount","totalFriendsCount","getRandomFriendsRequestError","randomFriendsRequestError","getChangingSubscriptionStatusError","getUsersRequestError","postDate","label","likesCount","comments","selectedProfile","profileStatus","selectedProfileFollowedInfo","followedStatus","updateProfileStatusError","addNewPost","date","messageBody","profileReceived","setProfileStatus","deletePost","postId","setProfilePhotoSuccess","setProfileDataSuccess","profileFollowedInfoReceived","toggleProfileFollowedInfo","setUpdateProfileStatusError","updateProfilePhoto","photoFile","setProfilePhoto","updatedPhotosData","getProfileStatus","requestProfileFollowedInfo","checkFollowStatus","updateProfileStatus","updateProfileData","formData","setProfileData","stopSubmit","_error","Promise","reject","profileReducer","newState","item","isFriendFilter","queryParams","FormData","append","followToUser","unfollowFromUser","delete","RequestError","Spinner","redirectHOC","afterLoggingIn","WrappedComponent","connect","mapStateToProps","isAuth","restProps","to","auth","isAuthorized","withSuccesAuthRedirect","setUsers","randomFriendsReceived","toggleFollowed","setPageNumber","setTotalUsersCount","count","setTotalFriendsCount","setFollowingInProgress","isInProgress","followUnfollowFlow","apiMethod","profileActions","followOrUnfollow","requestRandomFriends","undefined","usersReducer","authAPI","email","password","rememberMe","captcha","login","authUserPhoto","captchaUrl","photo","requestAuthUserPhoto","authProfile","requestUserAuthData","meData","authReducer","appInitialized","unhandledError","initializedSuccessfully","unhandledErrorCatched","appReducer","NewMessagesCounter","rerenderSecs","dialogsSelectors","isUserAuthorized","authSelectors","rerenderInterval","timerId","setInterval","clearInterval","title","NavbarLink","url","iconLink","showNewMessagesCounter","activeClassName","NavBar","closeMenu","e","icons","MobileMenu","isMenuVisible","setMenuVisibility","burgerBtnStyle","getUnhandledError","app","Header","userLogin","userAvatar","appSelectors","setTimeout","loginLink","loginPanel","mainLogo","FriendsBlock","React","memo","friendsPerPage","intervalSeconds","selectors","lastPage","timerInterval","min","max","randomPageNumber","floor","random","console","log","clearTimeout","randomFriendsList","f","friendImage","friendName","friendId","friendsBlockContent","Friend","AdsBlock","href","target","rel","adsImg","SideBarBlock","children","blockTitle","SideBar","useMediaQuery","query","required","CustomField","Component","input","meta","errorStatus","hasError","touched","errorClassName","fieldClassName","Textarea","Input","createField","validators","placeholder","Field","maxLength","maxLength25","LoginReduxForm","reduxForm","form","handleSubmit","htmlFor","LoginPage","ResultCodeForCaptchaEnum","CaptchaIsRequired","getSelectedProfile","profilePage","getSelectedProfileFollowedInfo","getUpdateProfileStatusError","Post","profileSelectors","fullName","format","ProfilePostsReduxForm","PostAddForm","newDate","Date","day","getDate","month","getMonth","year","getFullYear","hours","getHours","minutes","getMinutes","getCurrentDate","postMessage","postBody","reset","PostsTimline","isOwner","reverse","el","FullSizeImage","source","closeHandler","ProfileImages","userCover","userPhoto","displayFSImage","setFSImageDisplay","defaultCover","large","defaultPhoto","onChange","files","ProfileStatus","profileStatusMessage","editMode","setEditMode","statusMessage","setStatus","statusText","onDoubleClick","statusInput","autoFocus","currentTarget","onBlur","Row","inputName","element","ProfileDataReduxForm","turnOffEditMode","Object","keys","contacts","key","isLink","link","test","ProfileDataTable","aboutMe","lookingForAJob","lookingForAJobDescription","contactsList","ProfileButtons","profileFollowedInfo","ProfileDataList","dataVisibility","toggleDataVisibility","displayedDataContent","ProfileData","ProfileInfo","ProfilePage","topAnchor","useRef","current","scrollIntoView","block","behavior","ref","ProfilePageContainer","this","refreshProfile","prevProps","match","params","setUserProfile","authUserId","mapDispatchToProps","withRouter","DialogsListItem","dialogsItem","lastUserActivityDate","hasNewMessages","lastDialogActivityDate","style","fromNow","DialogsList","d","DialogForm","DialogsItemHeader","DialogsItem","interlocuter","authUserImg","useRouteMatch","dialogMessagesPortionSize","friendImg","ownerImg","DialogsPage","exact","path","NewsPage","MusicPage","SettingsPage","PageNotFound","UsersPage","lazy","ChatPage","MainSection","Suspense","fallback","from","Footer","App","catchAllUnhandledErrors","initializeApp","window","addEventListener","removeEventListener","rootReducer","combineReducers","formReducer","chatReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","UserAvatar","getAuthUserId","getIsAuthorized","getLogin","getAuthUserPhoto","UserName","subscribers","ws","notifySubscribersAboutStatus","createChannel","messageHandler","newMessages","JSON","parse","forEach","s","openHandler","errorHandler","cleanUp","close","WebSocket","chatAPI","event","callback","send","messagesReceived","statusChanged","_newMessageHandler","newMessageHandlerCreator","_statusChangedHandler","statusChangedHandlerCreator","m","index","array","axios","create","withCredentials","baseURL","headers","MessagesBtn","FollowBtn","btnLabel","btnStyle","some","followUnfollow","SendMessageForm","setMessage","sendMessageHandler","preventDefault","autoComplete","onKeyDown","shiftKey","ChatMessage","isOwnerMessage","DialogMessage","statusDisplay","setStatusDisplay","showStatus","seconds","milliseconds","MessageStatus","MessageStatusRequestError","DialogPagination","messagesPortionSize","loadedMessagesCount","viewedPortionsCount","oldMessagesPortionNumber","MessagesList","propsMessages","isAutoScroll","setIsAutoScroll","messagesAnchor","onScroll","abs","scrollHeight","scrollTop","clientHeight"],"mappings":"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","file":"static/js/main.13cfae40.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport { useEffect } from 'react';\nimport { nextArrow, prevArrow } from '../../../assets/icons';\n\nimport './pagination.scss'\n\n\nconst Pagination: React.FC<PropsType> = ({currentPage, totalItemsCount, pageSize, onPageSelected, portionSize = 10}) => {\n    \n    const [currentPortion, setCurrentPortion] = useState(1);\n    useEffect(() => {\n        if (currentPortion !== selectedPagePortion) {\n            setCurrentPortion(selectedPagePortion)\n        }\n        // eslint-disable-next-line\n    }, [currentPage])\n\n    const pagesCount = Math.ceil(totalItemsCount / pageSize);\n    const pages = [];\n    for(let i=1; i <= pagesCount; i++){\n        pages.push(i);\n    };\n    \n\n    const selectedPagePortion = Math.ceil(currentPage / portionSize)\n    const portionsCount = Math.ceil(pagesCount / portionSize);\n    const firstPortionPageNum = (currentPortion -1) * portionSize + 1;\n    const lastPortionPageNum = currentPortion * portionSize;\n    \n    const setNextPortion = () => {\n        if (currentPortion < portionsCount) {\n            setCurrentPortion(currentPortion + 1)\n        }\n    }\n    const setPrevPortion = () => {\n        if (currentPortion > 1) {\n            setCurrentPortion(currentPortion - 1)\n        }\n    }\n\n    return (\n        <div className=\"pagination\">\n            {currentPortion > 1 \n                && <button onClick={setPrevPortion}><img src={prevArrow} alt=\"prev\" className=\"pagination__prev-arrow\" /></button>}\n\n            <div className=\"pagination__list\">\n                {pages\n                    .filter(num => (num >= firstPortionPageNum && num <= lastPortionPageNum))\n                    .map(num =>\n                        <span \n                            key={num} \n                            className={`pagination__item ${num === currentPage ? 'pagination__item_active' : ''}`}\n                            onClick={() => onPageSelected(num)}>\n                            {num}\n                        </span>)\n                }\n            </div>\n\n            {currentPortion < portionsCount\n                && <button onClick={setNextPortion}><img src={nextArrow} alt=\"next\" className=\"pagination__next-arrow\" /></button>}\n        </div>\n    )\n}\n\nexport default Pagination\n\n\n\ntype PropsType = {\n    currentPage: number\n    totalItemsCount: number\n    pageSize: number\n    onPageSelected: (pageNumber: number) => void\n    portionSize?: number\n}","import React from 'react'\nimport { UserType } from '../../../../types/types'\nimport FollowBtn from '../../../common/buttons/followBtn/followBtn'\nimport MessagesBtn from '../../../common/buttons/messagesBtn/messagesBtn'\n\nimport UserAvatar from '../../../common/userAvatar/userAvatar'\nimport UserName from '../../../common/userName/userName'\n\n\nconst User: React.FC<PropsType> = ({user}) => {\n\n    const {id, photos, name, followed, status} = user\n\n    return (\n        <li className=\"users__list-item\">\n            <UserAvatar className=\"user__image\" userImage={photos.small} linkTo={`/profile/${id}`} />\n            <div className=\"user__details-wrapper\">\n                <div className=\"user__info\">\n                    <UserName className=\"user__name\" userName={name} linkTo={`/profile/${id}`} />\n                    <div className=\"user__status\">{status}</div>\n                </div>\n                <div className=\"user__buttons-wrapper\">\n                    <MessagesBtn linkTo={`/dialogs/${id}`} />\n                    <FollowBtn isFollowed={followed} userId={id} />\n                </div>\n            </div>\n        </li>\n    )\n}\n\nexport default User\n\n\n\ntype PropsType = {\n    user: UserType\n}","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport User from './user'\nimport RequestError from '../../../common/errors/requestError'\nimport { actions } from '../../../../reducers/usersReducer'\nimport * as usersSelectors from '../../../../selectors/users'\n\n\nconst UsersList: React.FC = () => {\n\n    const users = useSelector(usersSelectors.getUsers)\n    const changingSubscriptionStatusError = useSelector(usersSelectors.getChangingSubscriptionStatusError)\n    const dispatch = useDispatch()\n\n    useEffect( () => {\n        return () => {\n            dispatch(actions.setRequestError({changingSubscriptionStatusError: null}))\n        }\n    }, [])\n\n    return (\n        <>\n            <ul className=\"users__list\">\n                { users.map(u => <User key={u.id} user={u} />) }             \n            </ul>\n            {changingSubscriptionStatusError \n                && <RequestError errorMessage={changingSubscriptionStatusError} className=\"users__list-item_error\" />}\n        </>\n    )\n}\n\nexport default UsersList","type GetSearchTitleType = (term: string, friendFilter: boolean | null, currentPage: number, pagesCount: number) => string\n//can add another filters (Function argument + filter value convert logic + title string new parametr)\nexport const getSearchTitleFromSetParameters: GetSearchTitleType = (term, friendFilter, currentPage, pagesCount) => {\n    const filter1 = term ? `\"${term}\" ` : ''\n\n    let filter2\n    switch(friendFilter) {\n        case true:\n            filter2 = \"Friends Only\"\n            break\n        case false:\n            filter2 = \"Not Friends\"\n            break\n        default:\n            filter2 = \"All Users\"\n    }\n\n    return `Search ${filter1}In ${filter2} (Page ${currentPage} of ${pagesCount})`\n}","import React from 'react'\nimport {Formik, Form, Field, ErrorMessage} from 'formik'\nimport { UsersListFiltersType } from '../../../../reducers/usersReducer'\nimport { useSelector } from 'react-redux'\nimport * as usersSelectors from '../../../../selectors/users'\nimport { getSearchTitleFromSetParameters } from '../../../../utils/transformFuncs'\n\n\nconst usersSearchFormValidators = (values: UsersListFiltersType) => {\n    const errors = {};\n    // if (!values.term) {\n    // errors.term = 'Required';\n    // }\n    return errors;\n}\n\n\nconst UsersSearchForm: React.FC<PropsType> = (props) => {\n\n    const stateFilters = useSelector(usersSelectors.getUsersListFilters)\n\n    const onFormSubmit = (values: ReceivedValuesType, { setSubmitting }: {setSubmitting: (isSubmitting: boolean) => void} ) => {\n        // filters constructing\n        const filter = {\n            term: values.term,\n            friend: values.friend === 'Friends Only' ? true : values.friend === 'Not Friends' ? false : null\n        }\n        \n        props.onFiltersChanged(filter)\n        setSubmitting(false) // (fake disable) todo: reed docs, how to sync formik setSubmitting with the response from the server\n    }\n\n    const friendInputValue = stateFilters.friend === false ? \"Not Friends\" : stateFilters.friend === true ? \"Friends Only\" : null\n    return (\n        <Formik\n            initialValues={{term: stateFilters.term, friend: friendInputValue as boolean | null}}\n            enableReinitialize\n            validate={usersSearchFormValidators}\n            onSubmit={onFormSubmit}\n        >\n            {({isSubmitting}) => {\n\n                return (\n                    <Form className=\"users__search-form\">\n                        <div className=\"search__field-wrapper\">\n                            <Field className=\"users__search-field\" type=\"search\" name=\"term\" />\n                            <button className=\"users__search-btn\" type=\"submit\" disabled={isSubmitting}>\n                                Search\n                            </button>\n                        </div>\n                        \n                        <ErrorMessage className=\"users__search-error\" name=\"term\" component=\"div\" />\n                        <label className=\"users__search-label\">\n                            <Field type=\"radio\" name=\"friend\" value=\"Not Friends\" />\n                            Not friends\n                        </label>\n                        <label className=\"users__search-label\">\n                            <Field type=\"radio\" name=\"friend\" value=\"Friends Only\" />\n                            Friends\n                        </label>\n                        <h3 className=\"users__search-title\">\n                            {getSearchTitleFromSetParameters(stateFilters.term, stateFilters.friend,\n                                                                props.currentPage, props.pagesCount)}\n                        </h3>\n                    </Form>\n                )\n            }}\n        </Formik>\n    )\n}\n\nexport default UsersSearchForm\n\n\n\ntype ReceivedValuesType = {term: string, friend: string | null | boolean}\n\ntype PropsType = {\n    onFiltersChanged: (filter: UsersListFiltersType) => void\n    currentPage: number\n    pagesCount: number\n}","import React, { useEffect } from 'react'\nimport { actions, requestUsers, UsersListFiltersType} from '../../../../reducers/usersReducer'\nimport Pagination from '../../../common/pagination/pagination'\nimport UsersList from './usersList'\nimport { useDispatch, useSelector } from 'react-redux'\nimport * as usersSelectors from '../../../../selectors/users'\nimport UsersSearchForm from './usersSearchForm'\nimport Spinner from '../../../common/spinner'\nimport { withAnonUserRedirect } from '../../../HOCs/withRedirect'\nimport { compose } from 'redux'\nimport { useHistory } from 'react-router-dom'\nimport * as qs from 'qs'\nimport RequestError from '../../../common/errors/requestError'\n\nimport './usersPage.scss'\n\n\nconst UsersPage: React.FC = () => {\n\n    const totalUsersCount = useSelector(usersSelectors.getTotalUsersCount)\n    const pageSize = useSelector(usersSelectors.getPageSize)\n    const currentPage = useSelector(usersSelectors.getCurrentPage)\n    const isLoading = useSelector(usersSelectors.getLoadingStatus)\n    const usersRequestError = useSelector(usersSelectors.getUsersRequestError)\n    const filters = useSelector(usersSelectors.getUsersListFilters)\n\n    const pagesCount = Math.ceil(totalUsersCount / pageSize)\n\n    const dispatch = useDispatch()\n    const history = useHistory()\n\n    useEffect(() => { //componentDidMount\n        const queryString = history.location.search\n        const parsedQS: {page?: string, term?: string, friend?: string} = qs.parse(queryString, { ignoreQueryPrefix: true })\n \n        const queryPage = Number(parsedQS.page) || 1\n        const term = parsedQS.term ? parsedQS.term : ''\n        \n        let friend\n        switch(parsedQS.friend) {\n            case 'true':\n                friend = true\n                break\n            case 'false':\n                friend = false\n                break\n            default:\n                friend = null\n        }\n\n        dispatch( requestUsers(pageSize, queryPage, {term, friend}) ) \n        return () => { // componentWillUnmount\n            dispatch ( actions.setFilters({term: '', friend: null}) )\n        }\n        // eslint-disable-next-line\n    }, [])\n\n    useEffect(() => { // componentDidUpdate\n        pushSearchParams(currentPage, filters.term, filters.friend)\n        // eslint-disable-next-line\n    }, [filters, currentPage])\n    \n\n    const pushSearchParams = (P: number, T: string, F: boolean | null) => {\n        const term = T ? `&term=${T}` : ''\n        let friend\n        switch(F) {\n            case true:\n            case false:\n                friend = `&friend=${F}`\n                break\n            default:\n                friend = ''\n        }\n        \n        history.push({\n            pathname: '/users', // todo: do without hardcoding\n            search: `page=${P}${term}${friend}`\n        })\n    }\n\n    const onPageSelected = (num: number) => {\n        dispatch( requestUsers(pageSize, num, filters) )\n    }\n\n    const onFiltersChanged = (filters: UsersListFiltersType) => {\n        dispatch( requestUsers(pageSize, 1, filters) )\n    }\n\n    return (  \n        <div className=\"users__wrapper\">\n            <UsersSearchForm \n                onFiltersChanged={onFiltersChanged}\n                currentPage={currentPage}\n                pagesCount={pagesCount} />\n            <Pagination \n                currentPage={currentPage}\n                totalItemsCount={totalUsersCount}\n                pageSize={pageSize}\n                onPageSelected={onPageSelected} />\n            {isLoading ? <Spinner/> : <UsersList />}   \n            {usersRequestError && <RequestError errorMessage={usersRequestError} /> }\n        </div>\n    )\n}\n\nexport default compose<React.ComponentType>(\n    withAnonUserRedirect\n)(UsersPage)","import React from 'react'\nimport SendMessageForm from '../../../common/messagesComponents/sendMessageForm'\n\n\nconst ChatForm: React.FC<ChatFormPropsType> = ({sendMessage, status}) => {\n\n    return (\n        <SendMessageForm\n            fieldName=\"chatMessage\"\n            btnDisabled={status !== 'ready'}\n            sendMessage={sendMessage} />\n    )\n}\n\nexport default ChatForm\n\n\n\ntype ChatFormPropsType = {\n    sendMessage: (message: string) => void\n    status: string\n}","import {AppStateType} from '../reduxStore'\n\nexport const getStatus = (state: AppStateType) => {\n    return state.chat.status\n}\n\nexport const getMessages = (state: AppStateType) => {\n    return state.chat.messages\n}","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { actions, sendMessage, startMessagesListening, stopMessagesListening } from '../../../../reducers/chatReducer'\nimport ChatForm from './chatForm'\nimport MessagesList from '../../../common/messagesComponents/messagesList'\nimport { withAnonUserRedirect } from '../../../HOCs/withRedirect'\nimport * as chatSelectors from '../../../../selectors/chat'\n\nimport './chatPage.scss'\n\n\nconst ChatPage: React.FC = () => {\n    return (\n        <Chat />\n    )\n}\n\nconst Chat = () => {\n\n    const status = useSelector(chatSelectors.getStatus)\n    const messages = useSelector(chatSelectors.getMessages)\n    const dispatch = useDispatch()\n\n    const sendChatMessage = (message: string) => {\n        dispatch( sendMessage(message) )\n    }\n    \n    useEffect(() => {\n        dispatch(startMessagesListening())\n        return () => {\n            dispatch(stopMessagesListening())\n            dispatch( actions.messagesCleaned() )\n        }\n        // eslint-disable-next-line\n    }, [])\n\n    return (\n        <div className=\"chat__page\">\n            {status === 'error' && <div className=\"error-status\">Connection error. Try refreshing the page</div>}\n            <div className=\"chat__page-header\">Developers Chat</div>\n            <MessagesList chatMessages={messages} isLoading={status === 'pending' ? true : false} />\n           \n            <ChatForm sendMessage={sendChatMessage} status={status} />\n            \n\n        </div>\n    )\n}\n\n\nexport default withAnonUserRedirect(ChatPage)\n\n\n","import {AppStateType} from '../reduxStore'\n\nexport const getNewDialogsMessagesCount = (state: AppStateType) => {\n    return state.dialogsPage.newDialogsMessagesCount\n}\n\nexport const getViewedMessages = (state: AppStateType) => {\n    return state.dialogsPage.viewedMessages\n}\n\nexport const getSelectedDialogMessages = (state: AppStateType) => {\n    return state.dialogsPage.selectedDialogMessages\n}\n\nexport const getLoadedMessagesCount = (state: AppStateType) => {\n    return state.dialogsPage.selectedDialogMessages.length\n}\n\nexport const getSelectedDialogMessagesCount = (state: AppStateType) => {\n    return state.dialogsPage.selectedDialogMessagesCount\n}\n\nexport const getDialogInterlocuterProfile = (state: AppStateType) => {\n    return state.dialogsPage.dialogInterlocuterProfile\n}\n\nexport const getDialogsList = (state: AppStateType) => {\n    return state.dialogsPage.dialogsList\n}\n\nexport const getIsLoading = (state: AppStateType) => {\n    return state.dialogsPage.isLoading\n}\n\nexport const getNewMessagesCountRequestError = (state: AppStateType) => {\n    return state.dialogsPage.requestErrors.newMessagesCountRequestError\n}\n\nexport const getSendingMessageError = (state: AppStateType) => {\n    return state.dialogsPage.requestErrors.sendingMessageError\n}\n\nexport const getMessageStatusRequestError = (state: AppStateType) => {\n    return state.dialogsPage.requestErrors.messageStatusRequestError\n}\n\nexport const getRequestingMessagesError = (state: AppStateType) => {\n    return state.dialogsPage.requestErrors.requestingMessagesError\n}","export default __webpack_public_path__ + \"static/media/profile-icon.1e487f5e.svg\";","export default __webpack_public_path__ + \"static/media/users-icon.0861fcfd.svg\";","export default __webpack_public_path__ + \"static/media/dialogs-icon.870a5747.svg\";","export default __webpack_public_path__ + \"static/media/news-icon.63b638f3.svg\";","export default __webpack_public_path__ + \"static/media/music-icon.ec793a2a.svg\";","export default __webpack_public_path__ + \"static/media/chat-icon.a043f4e1.svg\";","export default __webpack_public_path__ + \"static/media/settings-icon.22166433.svg\";","export default __webpack_public_path__ + \"static/media/like.e0d25739.svg\";","export default __webpack_public_path__ + \"static/media/comments.21f4844f.svg\";","export default __webpack_public_path__ + \"static/media/share.6b3c2621.svg\";","export default __webpack_public_path__ + \"static/media/add-photo-icon.45c01ac0.svg\";","export default __webpack_public_path__ + \"static/media/go-back-arrow.813569ed.svg\";","export default __webpack_public_path__ + \"static/media/left-arrow.7e40e9c0.svg\";","export default __webpack_public_path__ + \"static/media/right-arrow.1cb0f8bb.svg\";","import { UserPhotosType } from \"../types/types\"\nimport { apiBase, ResultCodesEnum } from \"./API\"\n\nexport const dialogsAPI = {\n    getAllDialogsList() {\n        return apiBase.get<AllDialogsListItemType[]>('dialogs').then((res) => res.data)\n    },\n    getUserMessagesList(userId: number, pageNumber: number, pageSize: number) {\n        return apiBase.get<DialogMessagesListResponseType>(\n            `dialogs/${userId}/messages?page=${pageNumber}&count${pageSize}`).then((res) => res.data)\n    },\n    sendMessageToUser(userId: number, message: string) {\n        return apiBase.post<DialogsDefaultResponseType<SendDialogMessageResponseDataType, ResultCodesEnum>>(\n            `dialogs/${userId}/messages`, {body: message}).then((res) => res.data)\n    },\n    setDialogAtTheDialogsListTop(userId: number) { // start chatting, refresh your companion so that he was on top (AllDialogsList[0])\n        return apiBase.put<DialogsDefaultResponseType<{}, ResultCodesEnum>>(`dialogs/${userId}`)\n    },\n    getMessageViewedStatus(messageId: string) {\n        return apiBase.get<boolean>(`dialogs/messages/${messageId}/viewed`).then((res) => res.data)\n    },\n    markMessageAsSpam(messageId: string) {\n        return apiBase.post<DialogsDefaultResponseType<{}, ResultCodesEnum>>(`dialogs/messages/${messageId}/spam`)\n    },\n    deleteMessage(messageId: string) {\n        return apiBase.delete<DialogsDefaultResponseType<{}, ResultCodesEnum>>(`dialogs/messages/${messageId}`)\n    },\n    restoreMessage(messageId: string) { //from deleted and spam\n        return apiBase.put<DialogsDefaultResponseType<{}, ResultCodesEnum>>(`dialogs/messages/${messageId}/restore`)\n    },\n    getMessagesNewerThenDate(userId: number, date: string) {\n        return apiBase.get<AdvancedDialogMessageType[]>(`dialogs/${userId}/messages/new?newerThen=${date}`)\n    },\n    getNewMessagesTotalCount() {\n        return apiBase.get<number>(`dialogs/messages/new/count`).then((res) => res.data)\n    }\n\n}\n\n\n\ntype DialogsDefaultResponseType<D = {}, RC = ResultCodesEnum, FE = []> = {\n    data: D\n    resultCode: RC\n    fieldsErrors: FE\n    messages: Array<string>\n}\n\nexport type AllDialogsListItemType = {\n    hasNewMessages: boolean\n    id: number\n    lastDialogActivityDate: string // \"2021-09-04T11:10:28.433\"\n    lastUserActivityDate: string // \"2021-08-28T17:15:38.69\"\n    newMessagesCount: number\n    photos: UserPhotosType\n    userName: string\n}\n\ntype SendDialogMessageResponseDataType = {\n     message: AdvancedDialogMessageType\n}\n\nexport type AdvancedDialogMessageType = {\n    addedAt: string // \"2021-09-04T10:00:58.087\"\n    body: string // \"Hello my friend\"\n    deletedByRecipient: boolean\n    deletedBySender: boolean\n    distributionId: number | null\n    id: string // \"f1e38413-fa75-41e9-a7ed-4e2ce05d1718\"\n    isSpam: boolean\n    recipientId: number // 16320\n    recipientName: string // \"vanaf\"\n    senderId: number // 17964\n    senderName: string // \"insane4L\"\n    translatedBody: null | string\n    viewed: boolean\n}\n\n\n\n\ntype DialogMessagesListResponseType = {\n    error: null // | ??????\n    items: DialogMessageType[]\n    totalCount: number\n}\nexport type DialogMessageType = {\n    addedAt: string // \"2021-09-04T10:00:58.087\"\n    body: string // \"Hello my friend\"\n    id: string // \"f1e38413-fa75-41e9-a7ed-4e2ce05d1718\"\n    recipientId: number // 16320\n    senderId: number // 17964\n    senderName: string // \"insane4L\"\n    translatedBody: null | string\n    viewed: boolean\n}\n","import { BaseThunkType, InferActionsTypes } from \"../reduxStore\"\nimport { ResultCodesEnum } from \"../services/API\"\nimport { AllDialogsListItemType, dialogsAPI, DialogMessageType } from \"../services/dialogsAPI\"\nimport { usersAPI } from \"../services/usersAPI\"\nimport { ProfileType, RequestErrorHandlingType } from \"../types/types\"\n\n\nconst initialState = {\n    dialogsList: [] as AllDialogsListItemType[],\n    selectedDialogMessages: [] as DialogMessageType[],\n    selectedDialogMessagesCount: 0,\n    dialogInterlocuterProfile: null as null | ProfileType,\n    viewedMessages: [] as string[],\n    newDialogsMessagesCount: 0,\n    isLoading: false,\n    requestErrors: {\n        requestingMessagesError: null as null | string,\n        sendingMessageError: null as null | string,\n        messageStatusRequestError: null as null | string,\n        newMessagesCountRequestError: null as null | string\n    }\n}\ntype InitialStateType = typeof initialState\n\n\nconst dialogsReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\n    switch(action.type) {\n        case 'sn/dialogs/DIALOGS_LIST_RECEIVED':\n            return {\n                ...state,\n                dialogsList: action.payload.dialogsList\n            };\n        case 'sn/dialogs/DIALOG_MESSAGES_RECEIVED':\n            return {\n                ...state,\n                selectedDialogMessages: [...action.payload.dialogMessages, ...state.selectedDialogMessages]\n            };\n        case 'sn/dialogs/DIALOG_MESSAGES_CLEANED':\n            return {\n                ...state,\n                selectedDialogMessages: [],\n                selectedDialogMessagesCount: 0\n            };\n        case 'sn/dialogs/SET_DIALOG_MESSAGES_COUNT':\n            return {\n                ...state,\n                selectedDialogMessagesCount: action.payload.dialogMessagesCount\n            };\n        case 'sn/dialogs/INTERLOCUTER_PROFILE_RECEIVED':\n            return {\n                ...state,\n                dialogInterlocuterProfile: action.payload.profile\n            };\n        case 'sn/dialogs/MESSAGE_SENT':\n            return {\n                ...state,\n                selectedDialogMessages: [...state.selectedDialogMessages, action.payload.message] \n            };\n        case 'sn/dialogs/ADD_MESSAGE_TO_VIEWED':\n            return {\n                ...state,\n                viewedMessages: [...state.viewedMessages,  action.payload.messageId] \n            };\n        case 'sn/dialogs/DEL_MESSAGE_FROM_VIEWED':\n            return {\n                ...state,\n                viewedMessages: state.viewedMessages.filter( id => id !== action.payload.messageId)\n            };\n        case 'sn/dialogs/NEW_MESSAGES_COUNT_RECEIVED':\n            return {\n                ...state,\n                newDialogsMessagesCount: action.payload.newMessagesCount\n            };\n        case 'sn/dialogs/SET_IS_LOADING':\n            return {\n                ...state,\n                isLoading: action.payload.status\n            };\n        // case 'sn/dialogs/SET_REQUESTING_MESSAGES_ERROR':\n        //     return {\n        //         ...state,\n        //         requestErrors: {...state.requestErrors, requestingMessagesError: action.payload.error}\n        //     };\n        // case 'sn/dialogs/SET_SENDING_MESSAGE_ERROR':\n        //     return {\n        //         ...state,\n        //         requestErrors: {...state.requestErrors, sendingMessageError: action.payload.error}\n        //     };\n        // case 'sn/dialogs/SET_MESSAGE_STATUS_REQUEST_ERROR':\n        //     return {\n        //         ...state,\n        //         requestErrors: {...state.requestErrors, messageStatusRequestError: action.payload.error}\n        //     };\n        // case 'sn/dialogs/SET_NEW_MESSAGES_COUNT_REQUEST_ERROR':\n        //     return {\n        //         ...state,\n        //         requestErrors: {...state.requestErrors, newMessagesCountRequestError: action.payload.error}\n        //     };\n        case 'sn/dialogs/SET_REQUEST_ERROR':\n            return {\n                ...state,\n                requestErrors: {...state.requestErrors, ...action.payload.error}\n            };\n        default:\n            return state;\n    }\n}\n\n\ntype ActionsTypes = InferActionsTypes<typeof actions>\nexport const actions = {\n    dialogsListReceived: (dialogsList: AllDialogsListItemType[]) => (\n        {type: 'sn/dialogs/DIALOGS_LIST_RECEIVED', payload: {dialogsList}} as const\n    ),\n    dialogMessagesReceived: (dialogMessages: DialogMessageType[]) => (\n        {type: 'sn/dialogs/DIALOG_MESSAGES_RECEIVED', payload: {dialogMessages}} as const\n    ),\n    dialogMessagesCleaned: () => (\n        {type: 'sn/dialogs/DIALOG_MESSAGES_CLEANED'} as const\n    ),\n    setDialogMessagesCount: (dialogMessagesCount: number) => (\n        {type: 'sn/dialogs/SET_DIALOG_MESSAGES_COUNT', payload: {dialogMessagesCount}} as const\n    ),\n    messageSent: (message: DialogMessageType) => (\n        {type: 'sn/dialogs/MESSAGE_SENT', payload: {message}} as const\n    ),\n    addMessageToViewed: (messageId: string) => (\n        {type: 'sn/dialogs/ADD_MESSAGE_TO_VIEWED', payload: {messageId} } as const\n    ),\n    delMessageFromViewed: (messageId: string) => (\n        {type: 'sn/dialogs/DEL_MESSAGE_FROM_VIEWED', payload: {messageId} } as const\n    ),\n    newMessagesCountReceived: (newMessagesCount: number) => (\n        {type: 'sn/dialogs/NEW_MESSAGES_COUNT_RECEIVED', payload: {newMessagesCount} } as const\n    ),\n    setIsLoading: (status: boolean) => (\n        {type: 'sn/dialogs/SET_IS_LOADING', payload: {status}} as const\n    ),\n    interlocuterProfileReceived: (profile: ProfileType | null) => (\n        {type: 'sn/dialogs/INTERLOCUTER_PROFILE_RECEIVED', payload: {profile}} as const\n    ),\n    // setRequestingMessagesError: (error: null | string) => (\n    //     {type: 'sn/dialogs/SET_REQUESTING_MESSAGES_ERROR', payload: {error}} as const\n    // ),\n    // setSendingMessageError: (error: null | string) => (\n    //     {type: 'sn/dialogs/SET_SENDING_MESSAGE_ERROR', payload: {error}} as const\n    // ),\n    // setMessageStatusRequestError: (error: null | string) => (\n    //     {type: 'sn/dialogs/SET_MESSAGE_STATUS_REQUEST_ERROR', payload: {error}} as const\n    // ),\n    // setNewMessagesCountRequestError: (error: null | string) => (\n    //     {type: 'sn/dialogs/SET_NEW_MESSAGES_COUNT_REQUEST_ERROR', payload: {error}} as const\n    // ),\n    setRequestError: (error: RequestErrorHandlingType) => (\n        {type: 'sn/dialogs/SET_REQUEST_ERROR', payload: {error}} as const\n    )\n}\n\n\nexport const requestAllDialogsList = (): BaseThunkType<ActionsTypes> => async (dispatch) => {\n    dispatch( actions.setIsLoading(true) )\n    const dialogs = await dialogsAPI.getAllDialogsList()\n    dispatch( actions.setIsLoading(false) )\n    dispatch( actions.dialogsListReceived(dialogs) )\n}\n\n\nexport const requestDialogMessages = (userId: number, pageNumber: number, pageSize: number): BaseThunkType<ActionsTypes> => async (dispatch) => {\n    dispatch( actions.setIsLoading(true) )\n    const res = await dialogsAPI.getUserMessagesList(userId, pageNumber, pageSize)\n    const profile = await usersAPI.getUserProfile(userId)\n\n    if (res.error === null) {\n        dispatch( actions.setRequestError({requestingMessagesError: null}) )\n        dispatch( actions.setIsLoading(false) )\n\n        dispatch( actions.dialogMessagesReceived(res.items) )\n        dispatch( actions.setDialogMessagesCount(res.totalCount) )\n        dialogsAPI.setDialogAtTheDialogsListTop(userId)\n        dispatch( requestNewMessagesCount() )\n        dispatch( actions.interlocuterProfileReceived(profile) )\n    } else {\n        dispatch( actions.setRequestError({requestingMessagesError: 'Failed to load messages. Please try refresh the page'}) )\n    }\n}\n\n\nexport const sendMessage = (userId: number, message: string): BaseThunkType<ActionsTypes> => async (dispatch) => {\n    // dispatch( actions.setIsLoading(true) )\n    const res = await dialogsAPI.sendMessageToUser(userId, message)\n    // dispatch( actions.setIsLoading(false) )\n    if (res.resultCode === ResultCodesEnum.Success) {\n        dispatch( actions.setRequestError({sendingMessageError: null}) )\n        const sentMessage = {\n            addedAt: res.data.message.addedAt,\n            body: res.data.message.body,\n            id: res.data.message.id,\n            recipientId: res.data.message.recipientId,\n            senderId: res.data.message.senderId,\n            senderName: res.data.message.senderName,\n            translatedBody: res.data.message.translatedBody,\n            viewed: res.data.message.viewed\n        }\n        dispatch( actions.messageSent(sentMessage) )\n    } else {\n        dispatch( actions.setRequestError({sendingMessageError: 'An error has occurred. The message was not sent. Please try refresh the page'}) )\n    }\n    \n}\n\n\n\n\nexport const requestMessageStatus = (messageId: string): BaseThunkType<ActionsTypes> => async (dispatch) => {\n    try {\n        const status = await dialogsAPI.getMessageViewedStatus(messageId)\n        dispatch( actions.setRequestError({messageStatusRequestError: null}) )\n\n        if (status === true) {\n            dispatch( actions.addMessageToViewed(messageId) )\n        }  \n    } catch {\n        dispatch( actions.setRequestError({messageStatusRequestError: 'An error has occurred. The message status cannot be shown. Please try to click again'}) )\n    }  \n}\n\n\nexport const requestNewMessagesCount = (): BaseThunkType<ActionsTypes> => async (dispatch) => {\n    try {\n        const newMessagesCount = await dialogsAPI.getNewMessagesTotalCount()\n        dispatch( actions.setRequestError({newMessagesCountRequestError: null}) )\n\n        dispatch( actions.newMessagesCountReceived(newMessagesCount) )\n    } catch {\n        dispatch( actions.setRequestError({newMessagesCountRequestError: '?'}) )\n    }  \n}\n\n\nexport default dialogsReducer\n\n\n\n\n// todo: how to type by object keys\n// type ErrorKeyTypes = keyof typeof initialState.requestErrors\n// type ErrorValueType = null | string\n// type ErrorType = Record<ErrorKeyTypes, ErrorValueType>\n// actions.setError({newMessagesCountRequestError: null} as any) // without any:\n// An argument of type \"{newMessagesCountRequestError: null;}\" cannot be assigned a parameter of type \"ErrorType\".\n// The type \"{newMessagesCountRequestError: null;}\" is missing the following properties from the type \"ErrorType\": requestingMessagesError, sendMessageError, messageStatusRequestErrorts (2345)","// import {createSelector} from 'reselect'\nimport {AppStateType} from '../reduxStore'\n\nexport const getUsers = (state: AppStateType) => {\n    return state.usersPage.users\n}\n\nexport const getTotalUsersCount = (state: AppStateType) => {\n    return state.usersPage.totalUsersCount\n}\n\nexport const getPageSize = (state: AppStateType) => {\n    return state.usersPage.pageSize\n}\n\nexport const getCurrentPage = (state: AppStateType) => {\n    return state.usersPage.currentPage\n}\n\nexport const getUsersListFilters = (state: AppStateType) => {\n    return state.usersPage.filters\n}\n\nexport const getLoadingStatus = (state: AppStateType) => {\n    return state.usersPage.isLoading\n}\n\nexport const getFollowingInProgress = (state: AppStateType) => {\n    return state.usersPage.followingInProgress\n}\n\nexport const getRandomFriends = (state: AppStateType) => {\n    return state.usersPage.randomFriends\n}\n\nexport const getTotalFriendsCount = (state: AppStateType) => {\n    return state.usersPage.totalFriendsCount\n}\n\nexport const getRandomFriendsRequestError = (state: AppStateType) => {\n    return state.usersPage.requestErrors.randomFriendsRequestError\n}\n\nexport const getChangingSubscriptionStatusError = (state: AppStateType) => {\n    return state.usersPage.requestErrors.changingSubscriptionStatusError\n}\n\nexport const getUsersRequestError = (state: AppStateType) => {\n    return state.usersPage.requestErrors.usersRequestError\n}","import { FormAction, stopSubmit } from 'redux-form'\nimport { BaseThunkType, InferActionsTypes } from '../reduxStore'\nimport {ResultCodesEnum} from '../services/API'\nimport { usersAPI } from '../services/usersAPI'\nimport {UserPhotosType, ProfileType, PostType} from '../types/types'\n\n\nconst initialState = {\n    messages: [\n        {id: 1, postDate: '09.10.2021 12:16', label: 'Hi, this is my 1 post', likesCount: 22, comments: 0},\n        {id: 2, postDate: '09.10.2021 12:20', label: '2 post', likesCount: 12, comments: 0},\n        {id: 3, postDate: '09.10.2021 12:22', label: 'ok this is 3 post', likesCount: 8, comments: 0}\n    ] as Array<PostType>,\n    selectedProfile: null as null | ProfileType,\n    profileStatus: \"\",\n    selectedProfileFollowedInfo: {\n        userId: null as null | number,\n        followedStatus: null as null | boolean\n    },\n    isLoading: false,\n    requestErrors: {\n        updateProfileStatusError: null as null | string\n    }\n}\ntype InitialStateType = typeof initialState\n\n\nconst profileReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\n    switch(action.type) {\n        case 'sn/profile/ADD_NEW_POST':\n            let length = state.messages.length;\n            const id = ++length;\n            const newState = {\n                ...state,\n                messages: [...state.messages, {\n                    id,\n                    postDate: action.payload.date,\n                    label: action.payload.messageBody,\n                    likesCount: 0,\n                    comments: 0\n                    }]\n            };\n            return newState;\n        case 'sn/profile/DELETE_POST':\n            return {...state,  messages: state.messages.filter(item => item.id !== action.postId)}\n        case 'sn/profile/SET_PROFILE':\n            return {...state, selectedProfile: action.profile};\n        case 'sn/profile/SET_PROFILE_STATUS':\n            return {...state, profileStatus: action.message};\n        case 'sn/profile/SET_PROFILE_PHOTO_SUCCESS':\n            return {...state, selectedProfile: {...state.selectedProfile, photos: action.photos} as ProfileType }; // (temporarily \"as UserType\" because of TS error)\n        case 'sn/profile/SET_PROFILE_DATA_SUCCESS':\n            return {...state, selectedProfile: {...state.selectedProfile, ...action.data}}\n        case 'sn/profile/PROFILE_FOLLOWED_INFO_RECEIVED':\n            return {...state, selectedProfileFollowedInfo: action.payload}\n        case 'sn/profile/TOGGLE_PROFILE_FOLLOWED_INFO':\n            return {...state, selectedProfileFollowedInfo: {...state.selectedProfileFollowedInfo, followedStatus: !state.selectedProfileFollowedInfo.followedStatus}}\n        case 'sn/profile/SET_IS_LOADING':\n            return {...state, isLoading: action.isLoading}\n        case 'sn/profile/SET_UPDATE_PROFILE_STATUS_ERROR':\n            return {...state, requestErrors: {...state.requestErrors, updateProfileStatusError: action.payload.error}}\n        default:\n            return state;\n    }\n}\n\n\ntype ActionsTypes = InferActionsTypes<typeof actions>\nexport const actions = {\n    addNewPost: (date: string, messageBody: string) => (\n        {type: 'sn/profile/ADD_NEW_POST', payload: {date, messageBody} } as const\n    ),\n    profileReceived: (profile: ProfileType) => (\n        {type: 'sn/profile/SET_PROFILE', profile} as const\n    ),\n    setProfileStatus: (message: string) => (\n        {type: 'sn/profile/SET_PROFILE_STATUS', message} as const\n    ),\n    deletePost: (postId: number) => (\n        {type: 'sn/profile/DELETE_POST', postId} as const\n    ),\n    setProfilePhotoSuccess: (photos: UserPhotosType) => (\n        {type: 'sn/profile/SET_PROFILE_PHOTO_SUCCESS', photos} as const\n    ),\n    setProfileDataSuccess: (data: ProfileType) => (\n        {type: 'sn/profile/SET_PROFILE_DATA_SUCCESS', data} as const\n    ),\n    profileFollowedInfoReceived: (userId: number, followedStatus: boolean) => (\n            {type: 'sn/profile/PROFILE_FOLLOWED_INFO_RECEIVED', payload: {userId, followedStatus} } as const\n    ),\n    toggleProfileFollowedInfo: () => (\n        {type: 'sn/profile/TOGGLE_PROFILE_FOLLOWED_INFO'} as const\n    ),\n    setIsLoading: (isLoading: boolean) => (\n        {type: 'sn/profile/SET_IS_LOADING', isLoading} as const\n    ),\n    setUpdateProfileStatusError: (error: null | string) => (\n        {type: 'sn/profile/SET_UPDATE_PROFILE_STATUS_ERROR', payload: {error}} as const\n    )\n}\n\n\n\n\nexport const getUserProfile = (userId: number): BaseThunkType<ActionsTypes> => async (dispatch) => {\n    dispatch( actions.setIsLoading(true) )\n    const profile = await usersAPI.getUserProfile(userId)\n    dispatch( actions.profileReceived(profile) )\n    dispatch( actions.setIsLoading(false) )\n}\n\n\nexport const updateProfilePhoto = (photoFile: File): BaseThunkType<ActionsTypes> => async (dispatch) => {\n    const updatedPhotosData = await usersAPI.setProfilePhoto(photoFile);\n\n    if (updatedPhotosData.resultCode === ResultCodesEnum.Success) {\n        dispatch(actions.setProfilePhotoSuccess(updatedPhotosData.data.photos));\n    }\n}\n\n\nexport const getProfileStatus = (userId: number): BaseThunkType<ActionsTypes> => async (dispatch) => {\n    const profileStatus = await usersAPI.getProfileStatus(userId);\n    \n    if (profileStatus) {\n        dispatch(actions.setProfileStatus(profileStatus));\n    } else {\n        dispatch(actions.setProfileStatus(\"...\"));\n    }\n}\n\n\nexport const requestProfileFollowedInfo = (userId: number): BaseThunkType<ActionsTypes> => async (dispatch) => {\n    const isFollowed = await usersAPI.checkFollowStatus(userId)\n    dispatch( actions.profileFollowedInfoReceived(userId, isFollowed) )\n}\n\n\nexport const updateProfileStatus = (message: string): BaseThunkType<ActionsTypes> => async (dispatch) => {\n    const data = await usersAPI.setProfileStatus(message);\n    if (data.resultCode === ResultCodesEnum.Success) {\n        dispatch( actions.setUpdateProfileStatusError(null) )\n        dispatch(actions.setProfileStatus(message));\n    } else {\n        dispatch( actions.setUpdateProfileStatusError('An error has occurred. Please try to enter the status again.') )\n    }\n}\n\n\ntype WithAnotherActionsThunkType = BaseThunkType<ActionsTypes | FormAction>\nexport const updateProfileData = (formData: ProfileType): WithAnotherActionsThunkType => async (dispatch) => {\n    const data = await usersAPI.setProfileData(formData);\n    \n    if(data.resultCode === ResultCodesEnum.Success) {\n\n        dispatch(actions.setProfileDataSuccess(formData));\n    } else {\n        const errorMessage = data.messages[0];\n\n        dispatch(stopSubmit('profileData', {_error: errorMessage})); // action not from ActionsTypes\n        return Promise.reject(data.messages[0]);\n    }\n}\n\n\n\nexport default profileReducer","import {apiBase, ResponseType} from './API'\nimport {ProfileType, UserPhotosType, UserType} from '../types/types'\n\n\nexport const usersAPI = {\n    getUsers(pageSize: number, currentPage: number, term: string, friend: null | boolean) {\n        const isFriendFilter = term ? `&term=${term}` : ''\n        const byTermFilter = friend === true ? `&friend=${friend}` : friend === false ? `&friend=${false}` : ''\n        const queryParams = byTermFilter + isFriendFilter\n        return apiBase.get<GetUsersResponseType>(`users?count=${pageSize}&page=${currentPage}${queryParams}`).then(res => res.data)\n    },\n\n    setProfilePhoto(photoFile: any) {\n        const formData = new FormData();\n        formData.append(\"image\", photoFile)\n\n        return apiBase.put< ResponseType<SavePhotoResponseDataType> >('profile/photo', formData).then(res => res.data)\n    },\n\n    setProfileData(data: ProfileType) {\n        return apiBase.put<ResponseType>('profile', data).then(res => res.data)\n    },\n\n    getUserProfile(userId: number) {\n        return apiBase.get<ProfileType>(`profile/${userId}`).then(res => res.data)\n    },\n\n    getProfileStatus(userId: number) {\n        return apiBase.get<string>(`profile/status/${userId}`).then(res => res.data)\n    },\n\n    setProfileStatus(message: string) {\n        return apiBase.put<ResponseType>('profile/status', {status: message}).then(res => res.data)\n    },\n\n    checkFollowStatus(userId: number) {\n        return apiBase.get<boolean>(`follow/${userId}`).then(res => res.data)\n    },\n    followToUser(userId: number) {\n        return apiBase.post<ResponseType>(`follow/${userId}`).then(res => res.data)\n    },\n    unfollowFromUser(userId: number) {\n        return apiBase.delete<ResponseType>(`follow/${userId}`).then(res => res.data)\n    },\n}\n\n\n\ntype GetUsersResponseType = {\n    items: Array<UserType>\n    totalCount: number\n    error: null | string\n}\n\ntype SavePhotoResponseDataType = {\n    photos: UserPhotosType\n}","import React from 'react'\n\nimport './requestError.scss'\n\n\nconst RequestError: React.FC<RequestErrorPropsType> = ({errorMessage, className}) => {\n    return (\n        <div className={`request-error__block ${className}`}>\n            <div className=\"request-error__message\">\n                {errorMessage}\n            </div>\n        </div>\n    )\n}\n\nexport default RequestError\n\n\n\ntype RequestErrorPropsType = {\n    errorMessage: string\n    className?: string\n}","import React from 'react'\n\nimport './spinner.scss'\n\nconst Spinner = () => {\n    return (\n        <div className=\"spinner__wrapper\">\n            <div className=\"spinner\"></div>\n        </div>\n    )\n}\n\n\nexport default Spinner","import Spinner from './spinner';\n\nexport default Spinner;","import React from 'react'\nimport {Redirect} from 'react-router-dom'\nimport {connect} from 'react-redux'\nimport { AppStateType } from '../../reduxStore'\n\n\nconst redirectHOC = function<WCP>(afterLoggingIn = false) { \n    return (WrappedComponent: React.ComponentType<WCP>) => { // Wrapped Component Props\n        const RedirectComponent: React.FC<MapPropsType> = (props) => {\n            const {isAuth, ...restProps} = props\n\n            if(!isAuth && !afterLoggingIn) return <Redirect to={'/login'} />;\n            if(isAuth && afterLoggingIn) return <Redirect to={'/profile'} />;\n            return <WrappedComponent {...restProps as WCP}/>;\n        }\n       \n        return connect(mapStateToProps)(RedirectComponent)\n    }\n}\n\nconst mapStateToProps = (state: AppStateType) => ({\n    isAuth: state.auth.isAuthorized\n} as MapPropsType)\n\n\nexport const withAnonUserRedirect = redirectHOC()\nexport const withSuccesAuthRedirect =  redirectHOC(true)\n\n\n\ntype MapPropsType = {\n    isAuth: boolean\n}","import { Dispatch } from 'redux'\nimport { BaseThunkType, InferActionsTypes } from '../reduxStore'\nimport {ResponseType, ResultCodesEnum} from '../services/API'\nimport { usersAPI } from '../services/usersAPI'\nimport { RequestErrorHandlingType, UserType } from '../types/types'\nimport {actions as profileActions} from './profileReducer'\n\n\nconst initialState = {\n    users: [] as Array<UserType>,\n    randomFriends: null as null | Array<UserType>,\n    totalUsersCount: 0,\n    totalFriendsCount: 0,\n    pageSize: 10,\n    currentPage: 1,\n    filters: {\n        term: '', \n        friend: null as null | boolean\n    },\n    followingInProgress: [] as Array<number>,\n    isLoading: false,\n    requestErrors: {\n        changingSubscriptionStatusError: null as null | string,\n        usersRequestError: null as null | string,\n        randomFriendsRequestError: null as null | string\n    }\n}\nexport type InitialStateType = typeof initialState\nexport type UsersListFiltersType = typeof initialState.filters\n\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\n    switch(action.type) {\n        case 'sn/users/SET_USERS':\n            return {\n                ...state,\n                users: action.users\n            };\n        case 'sn/users/RANDOM_FRIENDS_RECEIVED':\n            return {\n                ...state,\n                randomFriends: action.payload.randomFriends\n            };\n        case 'sn/users/TOGGLE_FOLLOWED':\n            return {\n                ...state,\n                users: state.users.map( u => {\n                    if(u.id === action.userId) {\n                        u.followed = !u.followed\n                    };\n                    return u;\n                })\n            };\n        case 'sn/users/SET_PAGE_NUMBER':\n            return {...state, currentPage: action.num};\n        case 'sn/users/SET_TOTAL_USERS_COUNT':\n            return {...state, totalUsersCount: action.count};\n        case 'sn/users/SET_TOTAL_FRIENDS_COUNT':\n            return {...state, totalFriendsCount: action.count};\n        case 'sn/users/SET_FILTERS':\n            return {\n                ...state,\n                filters: {...state.filters, ...action.payload}\n            };\n        case 'sn/users/SET_IS_LOADING':\n            return {...state, isLoading: action.isLoading}\n        case 'sn/users/SET_FOLLOWING_IN_PROGRESS':\n            return {\n                ...state,\n                followingInProgress: action.isInProgress \n                    ? [...state.followingInProgress, action.userId]\n                    : state.followingInProgress.filter(id => id !== action.userId)\n            }\n        case 'sn/users/SET_REQUEST_ERROR':\n            return {\n                ...state,\n                requestErrors: {...state.requestErrors, ...action.payload.error}\n            };\n        default:\n            return state;\n    }\n}\n\n\ntype ActionsTypes = InferActionsTypes<typeof actions>\nexport const actions = {\n    setUsers: (users: Array<UserType>) => (\n        {type: 'sn/users/SET_USERS', users} as const\n    ),\n    randomFriendsReceived: (randomFriends: Array<UserType>) => (\n        {type: 'sn/users/RANDOM_FRIENDS_RECEIVED', payload: {randomFriends}} as const\n    ),\n    toggleFollowed: (userId: number) => (\n        {type: 'sn/users/TOGGLE_FOLLOWED', userId} as const\n    ),\n    setPageNumber: (num: number) => (\n        {type: 'sn/users/SET_PAGE_NUMBER', num} as const\n    ),\n    setTotalUsersCount: (count: number) => (\n        {type: 'sn/users/SET_TOTAL_USERS_COUNT', count} as const\n    ),\n    setTotalFriendsCount: (count: number) => (\n        {type: 'sn/users/SET_TOTAL_FRIENDS_COUNT', count} as const\n    ),\n    setFilters: (filters: UsersListFiltersType) => (\n        {type: 'sn/users/SET_FILTERS', payload: filters} as const\n    ),\n    setIsLoading: (isLoading: boolean) => (\n        {type: 'sn/users/SET_IS_LOADING', isLoading} as const\n    ),\n    setFollowingInProgress: (userId: number, \n        isInProgress: boolean) => (\n            {type: 'sn/users/SET_FOLLOWING_IN_PROGRESS', userId, isInProgress} as const\n    ),\n    setRequestError: (error: RequestErrorHandlingType) => (\n        {type: 'sn/users/SET_REQUEST_ERROR', payload: {error}} as const\n    )\n}\n\n\n\n\n\nconst followUnfollowFlow = async (dispatch: Dispatch<ActionsTypes | ProfileReducerActionToggleType>, \n                userId: number, apiMethod: (userId: number) => Promise<ResponseType<{}, ResultCodesEnum>>) => {\n\n    const data = await apiMethod(userId)\n\n    if(data.resultCode === ResultCodesEnum.Success) {\n        dispatch(actions.setRequestError({changingSubscriptionStatusError: null}))\n        dispatch(actions.toggleFollowed(userId))\n        dispatch(profileActions.toggleProfileFollowedInfo())\n        dispatch(actions.setFollowingInProgress(userId, false))\n    } else {\n        dispatch(actions.setRequestError({changingSubscriptionStatusError: 'Some error occured. Please try to follow again'}))\n    }\n}\n\nexport const followOrUnfollow = (userId: number): BaseThunkType<ActionsTypes> => async (dispatch) => {\n    dispatch(actions.setFollowingInProgress(userId, true)); // disable button while fetching\n\n    const isFollowed = await usersAPI.checkFollowStatus(userId)\n\n    if (!isFollowed) { // unfollowed ?\n        await followUnfollowFlow(dispatch, userId, usersAPI.followToUser) // follow\n    } else {\n        await followUnfollowFlow(dispatch, userId, usersAPI.unfollowFromUser) //unfollow\n        dispatch( requestRandomFriends(undefined, 1) )\n    }\n}\n\n\nexport const requestUsers = (pageSize: number, currentPage: number, {term = '', friend = null}: UsersListFiltersType): BaseThunkType<ActionsTypes> => async (dispatch) => {\n    \n    dispatch(actions.setIsLoading(true)) // activate spinner\n    try {\n        const data = await usersAPI.getUsers(pageSize, currentPage, term, friend)\n\n        dispatch(actions.setRequestError({usersRequestError: null}))\n        dispatch(actions.setFilters({term, friend}))\n        dispatch(actions.setPageNumber(currentPage))\n        dispatch(actions.setIsLoading(false))  // deactivate spinner after response\n    \n        dispatch(actions.setUsers(data.items)) // set users from response to state \n        dispatch(actions.setTotalUsersCount(data.totalCount)) // set total users count from response to state\n    } catch {\n        dispatch(actions.setIsLoading(false))\n        dispatch(actions.setRequestError({usersRequestError: 'Something goes wrong. Please try to refresh the page'}))\n    }\n}\n\nexport const requestRandomFriends = (pageSize = 9, pageNumber: number): BaseThunkType<ActionsTypes> => async (dispatch) => {\n    try {\n        const data = await usersAPI.getUsers(pageSize, pageNumber, '', true)\n        dispatch(actions.setRequestError({randomFriendsRequestError: null}))\n\n        if (data.totalCount > 0) {\n            dispatch( actions.randomFriendsReceived(data.items) )\n            dispatch( actions.setTotalFriendsCount(data.totalCount) )\n        } else {\n            dispatch( actions.randomFriendsReceived([]) )\n            dispatch( actions.setTotalFriendsCount(0) )\n        }\n    } \n    catch {\n        dispatch(actions.setRequestError({randomFriendsRequestError: 'An error has occurred, possibly a bad connection to the server. Auto-updating of the friends list is paused. To fix it please try reloading the page.'}))\n    }  \n}\n\n\n\nexport default usersReducer\n\n\n\ntype ProfileReducerActionToggleType = {\n    type: 'sn/profile/TOGGLE_PROFILE_FOLLOWED_INFO'\n}","export default __webpack_public_path__ + \"static/media/main-logo.09746948.svg\";","export default __webpack_public_path__ + \"static/media/defaultCover.3694bd45.jpeg\";","export default __webpack_public_path__ + \"static/media/defaultPhoto.45a0af68.png\";","export default __webpack_public_path__ + \"static/media/ads-img.1d74b859.jpg\";","import {apiBase, ResponseType, ResultCodesEnum, ResultCodeForCaptchaEnum, } from './API'\n\n\nexport const authAPI = {\n    getUserAuthData() {\n        return apiBase.get< ResponseType<AuthMeResponseDataType> >(`auth/me`).then(res => res.data)\n    },\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\n        return apiBase.post<LoginResponseType>('/auth/login', {\n            email, password, rememberMe, captcha}).then(res => res.data)\n    },\n    logout() {\n        return apiBase.delete<LogoutResponseType>('auth/login').then(res => res.data)\n    },\n    getCaptchaImg() {\n        return apiBase.get<GetCaptchaResponseType>('security/get-captcha-url').then(res => res.data)\n    }\n}\n\n\n\ntype AuthMeResponseDataType = {\n    id: number\n    email: string\n    login: string\n}\n\ntype LoginResponseType = ResponseType<{userId: number}, \n                                        ResultCodesEnum | ResultCodeForCaptchaEnum>\n\ntype LogoutResponseType = {\n    resultCode: ResultCodesEnum\n}\n\ntype GetCaptchaResponseType = {\n    url: string\n}","import {ResultCodeForCaptchaEnum, ResultCodesEnum} from '../services/API'\nimport { authAPI } from '../services/authAPI'\nimport {FormAction, stopSubmit} from 'redux-form'\nimport { BaseThunkType, InferActionsTypes } from '../reduxStore'\nimport { usersAPI } from '../services/usersAPI'\n\n\nconst initialState = {\n    email: null as string | null,\n    id: null as number | null,\n    login: null as string | null,\n    authUserPhoto: null as string | null,\n    isAuthorized: false,\n    captchaUrl: null as string | null\n}\ntype InitialStateType = typeof initialState;\n\n\nconst authReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\n    switch(action.type) {\n        case 'sn/auth/SET_AUTH_DATA':\n            return {...state, ...action.payload};\n        case 'sn/auth/SET_AUTH_USER_PHOTO':\n            return {...state, authUserPhoto: action.payload.photo};\n        case 'sn/auth/SET_CAPTCHA_IMG':\n            return {...state, ...action.payload};\n        default:\n            return state;\n    }\n}\n\n\ntype ActionsTypes = InferActionsTypes<typeof actions>\nexport const actions = {\n    setAuthData: (email: string | null, id: number | null, login: string | null, isAuthorized: boolean) => (\n        { type: 'sn/auth/SET_AUTH_DATA', payload: {email, id, login, isAuthorized} } as const\n    ),\n    setAuthUserPhoto: (photo: string) => (\n        {type: 'sn/auth/SET_AUTH_USER_PHOTO', payload: {photo} } as const\n    ),\n    setCaptchaImg: (captchaUrl: string) => (\n        {type: 'sn/auth/SET_CAPTCHA_IMG', payload: {captchaUrl} } as const\n    )\n}\n\nexport const requestAuthUserPhoto = (userId: number): BaseThunkType<ActionsTypes> => async (dispatch) => {\n    const authProfile = await usersAPI.getUserProfile(userId)\n    const photo = authProfile.photos.small\n\n    if (photo) {\n        dispatch( actions.setAuthUserPhoto(photo) )\n    }\n}\n\nexport const requestUserAuthData = (): BaseThunkType<ActionsTypes> => async (dispatch) => {\n    const meData = await authAPI.getUserAuthData()\n    const {email, id, login} = meData.data\n\n    if(meData.resultCode === ResultCodesEnum.Success) {\n        dispatch(actions.setAuthData(email, id, login, true))\n        dispatch( requestAuthUserPhoto(id) )\n    }\n\n}\n\n\nexport const getCaptchaUrl = (): BaseThunkType<ActionsTypes> => async (dispatch) => {\n    const data = await authAPI.getCaptchaImg()\n    dispatch(actions.setCaptchaImg(data.url))\n}\n\n\ntype WithAnotherActionsThunkType = BaseThunkType<ActionsTypes | FormAction>\nexport const login = (email: string, password: string, rememberMe: boolean,\n                    captcha: string): WithAnotherActionsThunkType => async (dispatch) => {\n    const data = await authAPI.login(email, password, rememberMe, captcha)\n\n    if (data.resultCode === ResultCodesEnum.Success) {\n        dispatch(requestUserAuthData())\n    } else if (data.resultCode === ResultCodeForCaptchaEnum.CaptchaIsRequired) {\n        dispatch(getCaptchaUrl())\n    } else {\n        const errorMessage = data.messages.length > 0 ? data.messages[0] : \"Some error\"\n\n        dispatch(stopSubmit(\"login\", {_error: errorMessage} )) // action not from ActionsTypes\n    }\n}\n\n\nexport const logout = (): BaseThunkType<ActionsTypes> => async (dispatch) => {\n    const data = await authAPI.logout()\n        \n    if (data.resultCode === ResultCodesEnum.Success) {\n        dispatch(actions.setAuthData(null, null, null, false))\n    }\n}\n\nexport default authReducer","import { BaseThunkType, InferActionsTypes } from \"../reduxStore\"\nimport {requestUserAuthData} from \"./authReducer\"\n\n\nconst initialState = {\n    appInitialized: false,\n    unhandledError: false\n}\ntype InitialStateType = typeof initialState\n\n\nconst appReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\n    switch(action.type) {\n        case 'sn/app/INITIALIZED_SUCCESSFULLY':\n            return {\n                ...state,\n                appInitialized: true\n            };\n        case 'sn/app/UNHANDLED_ERROR_CATCHED':\n            return {\n                ...state,\n                unhandledError: action.payload.error\n            };\n        default:\n            return state;\n    }\n}\n\n\ntype ActionsTypes = InferActionsTypes<typeof actions>\nexport const actions = {\n    initializedSuccessfully: () => (\n        {type: 'sn/app/INITIALIZED_SUCCESSFULLY'} as const\n    ),\n    unhandledErrorCatched: (error: boolean) => (\n        {type: 'sn/app/UNHANDLED_ERROR_CATCHED', payload: {error}} as const\n    )\n}\n\n\nexport const initializeApp = (): BaseThunkType<ActionsTypes> => async (dispatch) => {\n    await dispatch(requestUserAuthData());\n    dispatch(actions.initializedSuccessfully());\n}\n\n\nexport default appReducer","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { requestNewMessagesCount } from '../../../reducers/dialogsReducer'\nimport * as authSelectors from '../../../selectors/auth'\nimport * as dialogsSelectors from '../../../selectors/dialogs'\n\nimport './newMessagesCounter.scss'\n\n\nconst NewMessagesCounter: React.FC<NewMessagesCounterPropsType> = ({rerenderSecs}) => {\n    const newMessagesCountRequestError = useSelector(dialogsSelectors.getNewMessagesCountRequestError)\n    const newDialogsMessagesCount = useSelector(dialogsSelectors.getNewDialogsMessagesCount)\n    const isUserAuthorized = useSelector(authSelectors.getIsAuthorized)\n    const rerenderInterval = rerenderSecs * 1000\n    const dispatch = useDispatch()\n  \n    useEffect( () => {\n        if(isUserAuthorized) {\n            dispatch( requestNewMessagesCount() )\n        }\n    }, [])\n    \n    useEffect( () => {\n        let timerId: NodeJS.Timer\n        if(isUserAuthorized) {\n            timerId = setInterval(() => {\n                dispatch( requestNewMessagesCount() )     \n            }, rerenderInterval)\n        }\n        return () => {\n            clearInterval(timerId)\n        }\n    }, [isUserAuthorized])\n\n\n    //if new messages <= 0 and not request error: nothing is shown\n    if (newDialogsMessagesCount <= 0 && !newMessagesCountRequestError) return <span></span>\n    //if request error(no actual new messages count): display error \n    //else display new messages count\n    return (\n        <span \n            className=\"new-messages-counter navbar__new-messages-counter\"\n            title={`${newMessagesCountRequestError || newDialogsMessagesCount} new messages`}>\n                {newMessagesCountRequestError || newDialogsMessagesCount}\n        </span> \n    )\n}\n\nexport default NewMessagesCounter\n\n\n\ntype NewMessagesCounterPropsType = {\n    rerenderSecs: number\n}","import React from 'react'\nimport {NavLink} from 'react-router-dom'\nimport NewMessagesCounter from './newMessagesCounter'\n\nimport * as icons from '../../../assets/icons'\nimport './navBar.scss'\n\n\nconst NavBar: React.FC<NavBarPropsType> = ({closeMenu}) => {\n\n\tconst onMobileMenuClick = (e: React.MouseEvent<HTMLElement>) => {\n\t\t// console.log((e.target as Element).classList);\n\t\tif (closeMenu) closeMenu()\n\t}\n\n    return (\n\t\t<nav className=\"navbar\">\n\t\t\t<ul className=\"navbar__list\" onClick={onMobileMenuClick}>\n\t\t\t\t<NavbarLink url=\"/profile\" iconLink={icons.profileIcon} label=\"Profile\" />\n\t\t\t\t<NavbarLink url=\"/users\" iconLink={icons.usersIcon} label=\"Users\" />\n\t\t\t\t<NavbarLink url=\"/dialogs\" iconLink={icons.dialogsIcon} label=\"Dialogs\" showNewMessagesCounter />\n\t\t\t\t<NavbarLink url=\"/chat\" iconLink={icons.chatIcon} label=\"Developers Chat\" />\n\t\t\t\t<NavbarLink url=\"/news\" iconLink={icons.newsIcon} label=\"News\" />\n\t\t\t\t<NavbarLink url=\"/music\" iconLink={icons.musicIcon} label=\"Music\" />\n\n\t\t\t\t<NavbarLink url=\"/settings\" iconLink={icons.settingsIcon} label=\"Settings\" />\n\t\t\t</ul>\n      \t</nav>\n    )\n}\n\n\nconst NavbarLink: React.FC<NavbarLinkPropsType> = ({url, iconLink, label, showNewMessagesCounter}) => {\n  return (\n    <li className=\"navbar__list-item\">\n\t\t<NavLink className=\"navbar__link\" to={url} activeClassName=\"navbar__link_active\">\n\t\t\t<img className=\"navbar__link-icon\" src={iconLink} alt={`${label} icon`} />\n\t\t\t<span className=\"navbar__link-label\">{label}</span>\n      \t\t{showNewMessagesCounter && <NewMessagesCounter rerenderSecs={90} />}\n\t\t</NavLink>\n    </li>\n  )\n}\n\n\n\nexport default NavBar\n\n\n\ntype NavBarPropsType = {\n\tcloseMenu?: () => void\n}\n\ntype NavbarLinkPropsType = {\n  url: string\n  iconLink: string\n  label: string\n  showNewMessagesCounter?: boolean\n}","import NavBar from './navBar';\n\nexport default NavBar;","import React, { useState } from 'react'\nimport NavBar from '../navBar'\n\nimport './mobileMenu.scss'\n\n\nconst MobileMenu: React.FC = () => {\n    \n    const [isMenuVisible, setMenuVisibility] = useState(false)\n    const burgerBtnStyle = isMenuVisible ? 'mobile__menu-btn mobile__menu-btn_active' : 'mobile__menu-btn'\n\n    return (\n        <div className=\"mobile__menu\">\n            <div className={burgerBtnStyle} onClick={() => setMenuVisibility(!isMenuVisible)}>\n                <span></span>\n                <span></span>\n                <span></span>\n            </div>\n\n            {isMenuVisible \n                && <div className=\"mobile__menu-content\">\n                        <NavBar closeMenu={() => setMenuVisibility(false)} />\n                   </div>}\n        </div>\n    )\n}\n\nexport default MobileMenu","import {AppStateType} from '../reduxStore'\n\nexport const getUnhandledError = (state: AppStateType) => {\n    return state.app.unhandledError\n}","import Header from './header';\n\nexport default Header;","import React, { useEffect } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport {Link, NavLink} from 'react-router-dom'\nimport {logout} from '../../../reducers/authReducer'\nimport UserAvatar from \"../../common/userAvatar/userAvatar\"\nimport { actions } from \"../../../reducers/appReducer\"\nimport RequestError from \"../../common/errors/requestError\"\nimport MobileMenu from \"./mobileMenu\"\nimport * as authSelectors from \"../../../selectors/auth\"\nimport * as appSelectors from \"../../../selectors/app\"\n\nimport {mainLogo} from \"../../../assets/images\"\nimport \"./header.scss\"\n\n\nconst Header: React.FC = () => {\n\n\tconst isAuthorized = useSelector(authSelectors.getIsAuthorized)\n\tconst userId = useSelector(authSelectors.getAuthUserId)\n\tconst userLogin = useSelector(authSelectors.getLogin)\n\tconst userAvatar = useSelector(authSelectors.getAuthUserPhoto)\n\tconst unhandledError = useSelector(appSelectors.getUnhandledError)\n\tconst dispatch = useDispatch()\n\n\n\tuseEffect( () => {\n\t\tif (unhandledError) {\n\t\t\tsetTimeout( () => {\n\t\t\t\tdispatch(actions.unhandledErrorCatched(false))\n\t\t\t}, 10000)\n\t\t}\n\t}, [unhandledError])\n\n\tconst onLogout = () => {\n\tdispatch( logout() )\n\t}\n\n\tconst loginLink = <NavLink className=\"header__login-btn\" to=\"/login\">Log in</NavLink>;\n\tconst userName = <div className=\"header__login-data\">\n\t\t\t\t\t\t<UserAvatar linkTo={`/profile/${userId}`} className=\"header__login-avatar\" userImage={userAvatar} />\n\t\t\t\t\t\t<span className=\"header__login-nickname\">{userLogin}</span>\n\t\t\t\t\t\t<button className=\"header__login-btn\" onClick={onLogout}>Log out</button>\n\t\t\t\t\t</div>\n\n\tconst loginPanel = isAuthorized ? userName : loginLink;\n\treturn (\n\t\t<header className=\"header\">\n\t\t\t<div className=\"container\">\n\t\t\t<div className=\"header__content\">\n\n\t\t\t\t<MobileMenu />\n\n\t\t\t\t<Link className=\"header__logo\" to=\"/chat\">\n\t\t\t\t\t<img className=\"header__logo-img\" src={mainLogo} alt=\"main-logo\" />\n\t\t\t\t\t<span className=\"header__logo-text\">Social Network</span>\n\t\t\t\t</Link>\n\t\t\t\t\n\t\t\t\t<div className=\"header__login-panel\">\n\t\t\t\t{loginPanel}\n\t\t\t\t</div>\n\n\t\t\t\t{unhandledError && <RequestError \n\t\t\t\t\t\t\t\t\tclassName=\"app-unhandled-error\"\n\t\t\t\t\t\t\t\t\terrorMessage=\"Something goes wrong, server error. Please try refresh the page\" />}\n\n\t\t\t</div>\n\t\t\t\n\t\t\t</div>\n\t\t</header>\n\t)\n}\n\nexport default Header\n","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport { requestRandomFriends } from '../../../reducers/usersReducer'\nimport { getRandomIntegerNum } from '../../../utils/getValueFuncs'\nimport RequestError from '../../common/errors/requestError'\nimport Spinner from '../../common/spinner'\nimport UserAvatar from '../../common/userAvatar/userAvatar'\nimport UserName from '../../common/userName/userName'\nimport * as selectors from '../../../selectors/users'\n\nimport './friendsBlock.scss'\n\nconst FriendsBlock: React.FC<FriendsBlockPropsType> = React.memo( ({friendsPerPage, intervalSeconds}) => {\n\n    const randomFriends = useSelector(selectors.getRandomFriends)\n    const randomFriendsRequestError = useSelector(selectors.getRandomFriendsRequestError)\n    const totalFriendsCount = useSelector(selectors.getTotalFriendsCount)\n    const dispatch = useDispatch()\n\n    const firstPage = 1\n    const lastPage = Math.ceil(totalFriendsCount / friendsPerPage)\n    const timerInterval = intervalSeconds * 1000\n\n    useEffect( () => {\n        dispatch( requestRandomFriends(friendsPerPage, firstPage) )\n        //eslint-disable-next-line\n    }, [])\n\n    useEffect( () => {\n        let timerId: NodeJS.Timeout\n        if (totalFriendsCount > friendsPerPage) {\n            const randomPageNumber = getRandomIntegerNum(firstPage, lastPage)\n            timerId = setTimeout(() => {\n                console.log('tik tik');\n                dispatch( requestRandomFriends(friendsPerPage, randomPageNumber) )\n            }, timerInterval)\n        } \n        return () => {\n            clearTimeout(timerId)\n        }\n        //eslint-disable-next-line\n    }, [randomFriends, totalFriendsCount])\n\n    \n\n    const randomFriendsList = randomFriends?.map( (f) => (\n        <Friend \n            key={f.id}\n            friendImage={f.photos.small} \n            friendName={f.name} \n            friendId={f.id} />)\n    )\n\n    const friendsBlockContent = randomFriends?.length === 0\n        ? <Link to=\"/users\">Find friends on the <b>Users Page</b></Link>\n        : <div className=\"friends__block\">{randomFriendsList}</div>\n\n    return (\n        <>\n            {randomFriends && !randomFriendsRequestError && friendsBlockContent}\n            {!randomFriends && !randomFriendsRequestError && <Spinner/> }\n            {randomFriendsRequestError && <RequestError errorMessage={randomFriendsRequestError} />}\n        </>\n    )\n})\n\nconst Friend: React.FC<FriendPropsType> = ({friendImage, friendName, friendId}) => {\n    return (\n        <div className=\"friends__block-item\">\n            <UserAvatar className=\"friend__image\" userImage={friendImage} linkTo={`/profile/${friendId}`} />\n            <UserName className=\"friend__name\" userName={friendName} linkTo={`/profile/${friendId}`} />\n        </div>\n    )\n}\n\nexport default FriendsBlock\n\n\n\ntype FriendsBlockPropsType = {\n    friendsPerPage: number\n    intervalSeconds: number\n}\ntype FriendPropsType = {\n    friendImage: string | null\n    friendName: string\n    friendId: number\n}","\nexport function getRandomIntegerNum(min: number, max: number) {\n    return Math.floor(Math.random() * (max - min + 1)) + min\n}\n\nexport function getCurrentDate() {\n    const newDate = new Date()\n    const day = newDate.getDate()\n    const month = newDate.getMonth() +1\n    const year = newDate.getFullYear()\n    const hours = newDate.getHours() % 24\n    const minutes = newDate.getMinutes() % 60\n\n    return `${month}.${day}.${year} ${hours}:${minutes}`\n}","import FriendsBlock from './friendsBlock';\n\nexport default FriendsBlock;","import AdsBlock from './adsBlock';\n\nexport default AdsBlock;","import React from 'react';\n\nimport {adsImg} from '../../../assets/images';\nimport './adsBlock.scss'\n\nconst AdsBlock = () => {\n    return (\n        <a href=\"https://karpeyev.ru\" target=\"_blank\" rel=\"noreferrer\" className=\"ads__content\">\n            <div className=\"ads__content-img\">\n                <img src={adsImg} alt=\"ads_image\" />\n            </div>\n            <div className=\"ads__content-link\">karpeyev.ru</div>\n            <div className=\"ads__content-title\">Создадим сайт любой сложности под ваши задачи</div>\n        </a>\n    );\n}\n\nexport default AdsBlock;","import SideBarBlock from './sideBarBlock'\n\nexport default SideBarBlock","import React from 'react'\n\nimport './sideBarBlock.scss'\n\n\nconst SideBarBlock: React.FC<PropsType> = ({children, blockTitle}) => {\n    return (\n        <div className=\"sidebar__block\">\n            <div className=\"sidebar__block-title\">{blockTitle}</div>\n            <div className=\"sidebar__block-content\">\n                {children}\n            </div>\n        </div>\n    )\n}\n\nexport default SideBarBlock\n\n\n\ntype PropsType = {\n    blockTitle: string | React.RefAttributes<HTMLAnchorElement>\n}\n\n","import SideBar from './sideBar';\n\nexport default SideBar;","import React from 'react'\nimport NavBar from '../navBar'\nimport FriendsBlock from '../friendsBlock'\nimport AdsBlock from '../adsBlock'\nimport {connect} from 'react-redux'\nimport { AppStateType } from '../../../reduxStore'\nimport SideBarBlock from './sideBarBlock/'\nimport { Link } from 'react-router-dom'\nimport { useMediaQuery } from 'react-responsive'\n\nimport './sideBar.scss'\n\n\nconst SideBar: React.FC<PropsType> = (props) => {\n\n    const isSmallerThanLgBreakPoint = useMediaQuery({ query: `(max-width: 992px)`})\n\n    if (isSmallerThanLgBreakPoint) return <span className=\"hidden-stub\"></span>\n    return (\n        <aside className=\"sidebar\">\n            <NavBar />\n\n            {props.isUserAuthorized && \n                <SideBarBlock blockTitle={<Link to=\"/users?friend=true\">Friends</Link>}>\n                    <FriendsBlock friendsPerPage={9} intervalSeconds={300} />\n                </SideBarBlock>\n            }\n            \n            <SideBarBlock blockTitle=\"Ads\">\n                <AdsBlock />\n            </SideBarBlock>\n        </aside>\n    );\n}\n\nconst mapStateToProps = (state: AppStateType) => ({\n    isUserAuthorized: state.auth.isAuthorized\n})\n\nexport default connect(mapStateToProps)(SideBar)\n\n\n\ntype PropsType = {\n    isUserAuthorized: boolean\n}","export type FieldValidatorType = (value: string) => undefined | string\n\n\nexport const required: FieldValidatorType = (value) => {\n    if(!value) return \"Field required\";\n\n    return undefined\n}\n\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\n    if (value && value.length > maxLength) return `Max ${maxLength} symbols`;\n    \n    return undefined;\n}","import React from 'react'\nimport { Field, WrappedFieldInputProps, WrappedFieldMetaProps, WrappedFieldProps } from 'redux-form'\nimport { FieldValidatorType } from '../../../utils/validation/validators'\n\nimport './formsControls.scss'\n\n\nconst CustomField = (Component: any): React.FC<CustomFieldProps> => ({input, meta, ...props}) => { // Component: HTMLElement\n    const errorStatus = meta.error;\n    const hasError = errorStatus && meta.touched;\n\n    const errorClassName = hasError ? \"error\" : \"\";\n    const fieldClassName = props.className || \"\"; // if the element already has a className\n\n    return(\n        <>\n            <Component {...input} {...props} className={`${fieldClassName} ${errorClassName}`} />\n\n            { hasError && <span className=\"error-status\">{errorStatus}</span> }\n        </>\n    )\n}\n\nexport const Textarea = CustomField('textarea');\nexport const Input = CustomField('input')\n\n \nexport function createField<FormKeysType extends string>(name: FormKeysType, component: React.FC<WrappedFieldProps> | string,\n                            validators: Array<FieldValidatorType>, placeholder: string | undefined,\n                            props = {}) {\n    return <Field name={name}\n           component={component}\n           validate={validators}\n           placeholder={placeholder}\n           {...props}\n        />\n}\n\n\n\nexport type CustomFieldProps = {\n    input: WrappedFieldInputProps\n    meta: WrappedFieldMetaProps\n    className?: string\n}","import React from 'react'\nimport {reduxForm, InjectedFormProps} from 'redux-form'\nimport {connect} from 'react-redux'\nimport {login} from '../../../../reducers/authReducer'\nimport {required, maxLengthCreator} from '../../../../utils/validation/validators'\nimport {createField, Input} from '../../../common/formsControls/formsControls'\nimport {withSuccesAuthRedirect} from '../../../HOCs/withRedirect'\nimport {compose} from 'redux'\nimport { AppStateType } from '../../../../reduxStore'\n\nimport './loginPage.scss'\n\n\nconst maxLength25 = maxLengthCreator(25)\n\nlet LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, FormOwnPropsType> & FormOwnPropsType> = (props) => {\n    return (\n        <form className=\"login__form\" onSubmit={props.handleSubmit}>\n            <div>\n                {createField<LoginFormValuesTypeKeys>(\"email\", Input, [required, maxLength25], \"enter user name\", {className: \"login__input-email\"})}\n                {/* <Field validate={[required, maxLength25]} name=\"userEmail\" component={Input} placeholder=\"enter user name\" /> */}\n            </div>\n            <div>\n                {createField<LoginFormValuesTypeKeys>(\"password\", Input, [required, maxLength25], \"enter user password\", {type: \"password\", className: \"login__input-password\"})}\n                {/* <Field validate={[required, maxLength25]} name=\"userPass\" component={Input} type=\"password\" placeholder=\"enter user password\" /> */}\n            </div>\n            <div>\n                {createField<LoginFormValuesTypeKeys>(\"rememberMe\", \"input\", [], undefined, {type: \"checkbox\", id: \"login__checkbox\"})}\n                {/* <Field name=\"rememberMe\" component=\"input\" type=\"checkbox\" /> remember me */}\n                <label className=\"login__input-checkbox\" htmlFor=\"login__checkbox\">Remember me</label>\n            </div>\n            {\n                props.captchaUrl && \n                <div>\n                    {createField<LoginFormValuesTypeKeys>(\"captcha\", Input, [required], \"enter symbols from image\", {className: \"login__input-captcha\"})}\n                    {/* <Field name=\"captcha\" component={Input} validate={[required]} placeholder=\"enter symbols from image\" /> */}\n                    <img className=\"login__input-captcha-img\" src={props.captchaUrl} alt=\"captcha\" />\n                </div>\n            }\n            {\n                props.error && <div className=\"submit-error\">{props.error}</div>\n            }\n            \n            <button className=\"login__form-btn\">Log in</button>\n            \n        </form>\n    )\n}\n\n\nconst LoginReduxForm = reduxForm<LoginFormValuesType, FormOwnPropsType>({form: 'login'})(LoginForm);\n\n\nconst LoginPage: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\n    const onSubmit = (formData: LoginFormValuesType) => {\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha);\n    }\n\n    return (\n        <div className=\"login-page__wrapper\">\n            <h2 className=\"login-page__title\">Login</h2>\n            <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl} />\n        </div>\n    )\n}\n\nconst mapStateToProps = (state: AppStateType): MapStatePropsType  => {\n    return {\n        captchaUrl: state.auth.captchaUrl\n    }\n}\n\nexport default compose<React.ComponentType>(withSuccesAuthRedirect,\n                       connect(mapStateToProps, {login})\n                       )\n                       (LoginPage);\n\n\n\n\ntype FormOwnPropsType = {\n    captchaUrl: string | null\n}\n\ntype LoginFormValuesType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha: string\n}\n\ntype LoginFormValuesTypeKeys = Extract<keyof LoginFormValuesType, string>\n\ntype MapStatePropsType = {\n    captchaUrl: string | null\n}\n\ntype MapDispatchPropsType = {\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\n}","import LoginPage from './loginPage';\n\nexport default LoginPage;","import {AppStateType} from '../reduxStore'\n\nexport const getSelectedProfile = (state: AppStateType) => {\n    return state.profilePage.selectedProfile\n}\n\nexport const getSelectedProfileFollowedInfo = (state: AppStateType) => {\n    return state.profilePage.selectedProfileFollowedInfo\n}\n\nexport const getProfileStatus = (state: AppStateType) => {\n    return state.profilePage.profileStatus\n}\n\nexport const getUpdateProfileStatusError = (state: AppStateType) => {\n    return state.profilePage.requestErrors.updateProfileStatusError\n}\n","import React from 'react'\nimport { PostType } from '../../../../../types/types'\nimport { useSelector } from 'react-redux'\nimport Moment from 'react-moment'\nimport UserAvatar from '../../../../common/userAvatar/userAvatar'\nimport UserName from '../../../../common/userName/userName'\nimport * as profileSelectors from '../../../../../selectors/profile'\n\nimport * as icons from '../../../../../assets/icons'\n\n\nconst Post: React.FC<PropsType> = ({item}) => {\n\n    const profile = useSelector(profileSelectors.getSelectedProfile)\n\n    return (\n        <div key={item.id} className=\"posts__item\">\n            <div className=\"posts__item_header\">\n                <UserAvatar className=\"post__author-image\" userImage={profile?.photos.small} linkTo={`/profile/${profile?.userId}`} />\n                <div className=\"post__info-col\">\n                    <UserName className=\"post__author-name\" userName={profile?.fullName} linkTo={`/profile/${profile?.userId}`} />\n                    {/* must be a link /postLink  (when server can save posts)*/}\n                    <div className=\"post__date\"><Moment format=\"DD MMM YYYY hh:mm\" date={item.postDate} /> </div>\n                </div>\n            </div>\n\n            <div className=\"posts__item_content\">\n                {item.label}\n            </div>\n\n            <div className=\"posts__item_footer\">\n                <div className=\"post__action\">\n                    <img className=\"post__action_icon like__action\" src={icons.likeIcon} alt=\"like_icon\" />\n                    <div className=\"post__action_counter like__counter\">{item.likesCount}</div>\n                </div>\n                <div className=\"post__action\">\n                    <img className=\"post__action_icon comments__action\" src={icons.commentsIcon} alt=\"comments_icon\" />\n                    <div className=\"post__action_counter coments__counter\">{item.comments}</div>\n                </div>\n                <div className=\"post__action\">\n                    <img className=\"post__action_icon share__action\" src={icons.shareIcon} alt=\"share_icon\" />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Post\n\n\n\ntype PropsType = {item: PostType}","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport {InjectedFormProps, reduxForm, reset} from 'redux-form'\nimport { actions } from '../../../../../../reducers/profileReducer'\nimport { getCurrentDate } from '../../../../../../utils/getValueFuncs'\nimport {required} from '../../../../../../utils/validation/validators'\nimport {createField, Textarea} from '../../../../../common/formsControls/formsControls'\n\nimport './postAddForm.scss'\n\n\nlet ProfilePostsForm: React.FC< InjectedFormProps<PostFormValuesType, FormOwnPropsType> & FormOwnPropsType > = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit} className=\"add-post__form\">\n            {createField<PostFormValuesTypeKeys>(\"postBody\", Textarea, [required],\n                                                \"Type new post message here..\", {className: \"add-post__textarea\",\n                                                maxLength: \"1500\"})}\n            <button className=\"add-post__btn\">Post</button>\n        </form>\n    )\n}\n\n\nconst ProfilePostsReduxForm = reduxForm<PostFormValuesType, FormOwnPropsType>({form: \"postsForm\"})(ProfilePostsForm);\n\n\nconst PostAddForm: React.FC = () => {\n\n    const dispatch = useDispatch()\n\n    const onFormSubmit = (formData: PostFormValuesType) => {\n        const date = getCurrentDate()\n        const postMessage = `${formData.postBody} SECTION is HARDCODED due to API restrictions`\n        dispatch( actions.addNewPost(date, postMessage) )\n        dispatch( reset('postsForm') )\n    }\n\n    return (\n        <div className=\"add-post__block\">\n            <div className=\"add-post__title\">Add new post</div>\n            <ProfilePostsReduxForm onSubmit={onFormSubmit} />\n        </div>\n    )\n}\n\n\nexport default PostAddForm\n\n\n\n\ntype PostFormValuesType = {\n    postBody: string\n}\ntype PostFormValuesTypeKeys = Extract<keyof PostFormValuesType, string>\n\ntype FormOwnPropsType = {}","import PostAddForm from './postAddForm';\n\nexport default PostAddForm;","import PostsTimline from './postsTimeline';\n\nexport default PostsTimline;","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { AppStateType } from '../../../../../reduxStore'\nimport { PostType } from '../../../../../types/types'\nimport Post from './post'\nimport PostAddForm from './postAddForm'\n\nimport './postsTimeline.scss'\n\n\nconst PostsTimline: React.FC<PropsType> = ({isOwner}) => {\n    const messages = useSelector<AppStateType, PostType[]>( (state) => state.profilePage.messages )\n    return (\n        <>\n            {isOwner && <PostAddForm />}\n            <div className=\"posts__timeline\">\n                {\n                    [...messages].reverse().map(el => {\n                        return <Post key={el.id} item={el} />\n                    })\n                }\n            </div>\n        </>\n    )\n}\n\nexport default PostsTimline\n\n\n\ntype PropsType = {\n    isOwner: boolean\n}","import React from 'react'\n\nimport './fullSizeImage.scss'\n\n\nconst FullSizeImage: React.FC<FullSizeImagePropsType> = ({source, closeHandler}) => {\n    \n    return (\n        <div className=\"fsi\">\n            <div className=\"fsi__wrapper\">\n                <img className=\"fsi__picture\" src={source} alt=\"full_size_image\" />\n                <span className=\"fsi_close\" onClick={closeHandler}>&times;</span>\n            </div>\n        </div>\n    )\n}\n\nexport default FullSizeImage\n\n\n\ntype FullSizeImagePropsType = {\n    source: string\n    closeHandler: () => void\n}","import React, { ChangeEvent, useState } from 'react'\nimport { UserPhotosType } from '../../../../../types/types'\nimport { useDispatch } from 'react-redux'\nimport { updateProfilePhoto } from '../../../../../reducers/profileReducer'\nimport FullSizeImage from '../../../../common/imagesPresentation/fullSizeImage'\n\nimport {defaultCover, defaultPhoto} from '../../../../../assets/images'\nimport * as icons from '../../../../../assets/icons'\n\n\nconst ProfileImages: React.FC<PropsType> = ({isOwner, userCover, userPhoto}) => {\n\n    const [displayFSImage, setFSImageDisplay] = useState(false)\n    const dispatch = useDispatch()\n\n    const zoomInPhoto = () => {\n        if (userPhoto.large) {\n            setFSImageDisplay(true)\n        }\n    }\n\n    const onNewPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n        if(e.target.files?.length) {\n            dispatch( updateProfilePhoto(e.target.files[0]) )\n        }\n    }\n\n    return (\n        <div className=\"profile__info-images\">\n            <img className=\"profile__info-cover\" src={userCover || defaultCover} alt=\"\" />\n            <div className=\"avatar__wrapper\">\n                <div className=\"profile__info-avatar\" >\n                    <img \n                        onClick={zoomInPhoto}\n                        className=\"profile__info-photo\"\n                        src={userPhoto.small || defaultPhoto}\n                        alt=\"user_photo\" />\n                    {displayFSImage && userPhoto.large \n                        && <FullSizeImage source={userPhoto.large} closeHandler={() => setFSImageDisplay(false)}/>}\n                </div>\n                {isOwner \n                    && <div className=\"change-photo\">\n                            <input id=\"change-photo_input\" onChange={onNewPhotoSelected} type=\"file\" />\n                            <label className=\"change-photo_label\" htmlFor=\"change-photo_input\">\n                                <img className=\"change-photo_icon\" src={icons.addNewImage} alt=\"new_photo\" />\n                            </label>\n                        </div>\n                }\n            </div>  \n        </div>\n    )\n}\n\nexport default ProfileImages\n\n\n\ntype PropsType = {\n    isOwner: boolean\n    userCover: string | null\n    userPhoto: UserPhotosType\n}\n","import React, {useState, useEffect, ChangeEvent} from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { actions, updateProfileStatus } from '../../../../../reducers/profileReducer'\nimport RequestError from '../../../../common/errors/requestError'\nimport * as profileSelectors from '../../../../../selectors/profile'\n\n\nconst ProfileStatus: React.FC<PropsType> = ({isOwner}) => {\n\n    const updateProfileStatusError = useSelector(profileSelectors.getUpdateProfileStatusError)\n    const profileStatusMessage = useSelector(profileSelectors.getProfileStatus)\n    const [editMode, setEditMode] = useState(false)\n    const [statusMessage, setStatus] = useState(profileStatusMessage)\n    const dispatch = useDispatch()\n    \n    useEffect( () => {\n        setStatus(profileStatusMessage)\n    }, [profileStatusMessage])\n    \n    useEffect( () => {\n        return () => {\n            dispatch( actions.setUpdateProfileStatusError(null) ) //error cleanup\n        }\n    }, [])\n\n    const onStatusUpdate = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value)\n    }\n\n    const activateEditMode = () => {\n        setEditMode(true);\n    }\n\n    const deactiveteEditMode = () => {\n        setEditMode(false);\n        dispatch( updateProfileStatus(statusMessage) )\n    }\n    \n    const statusText = <div className=\"profile__status-text\"\n                            onDoubleClick={isOwner ? activateEditMode : undefined}\n                            title={isOwner ? \"Double click to edit\" : undefined} >\n                            {profileStatusMessage}\n                        </div>\n\n    const statusInput = <input className=\"profile__status-input\"\n                               value={statusMessage}\n                               type=\"text\"\n                               autoFocus\n                               onChange={onStatusUpdate}\n                               onBlur={deactiveteEditMode} />\n\n    return (\n        <div className=\"profile__status\">\n            {editMode ? statusInput : statusText}\n            {updateProfileStatusError && <RequestError errorMessage={updateProfileStatusError} />}\n        </div>\n    )\n\n}\n\nexport default ProfileStatus\n\n\n\ntype PropsType = {\n    isOwner: boolean\n}","import React from 'react';\nimport {reduxForm, Field, InjectedFormProps} from 'redux-form';\nimport { ProfileType } from '../../../../../types/types';\nimport {CustomFieldProps, Input, Textarea} from '../../../../common/formsControls/formsControls';\n\n\nlet ProfileDataForm: React.FC<InjectedFormProps<ProfileDataFormValuesType, FormOwnPropsType> & FormOwnPropsType> = ({user, turnOffEditMode, handleSubmit, error}) => {\n\n    return (\n        <form onSubmit={handleSubmit}>\n            {error && <div><b>{error}</b></div>}\n            <Row title=\"Are you looking for a job?\" inputName=\"lookingForAJob\" type=\"checkbox\" element=\"input\" />\n            <Row title=\"Your professional skills\" inputName=\"lookingForAJobDescription\" element={Textarea} />\n            <Row title=\"Full Name\" inputName=\"fullName\" element={Input}/>\n            <Row title=\"About Me\" inputName=\"aboutMe\" element={Textarea} />\n            \n            {\n                Object.keys(user.contacts).map( key => {\n                    return <Row key={key} title={key} inputName={\"contacts.\" + key} element={Input} />\n                })\n            }\n            <div className=\"profile__data-buttons\">\n                <button className=\"profile__data-btn\" onClick={turnOffEditMode} type=\"button\">Cancel</button>\n                <button className=\"profile__data-btn\" type=\"submit\">Save</button>\n            </div>\n        </form>\n    )\n}\n\n\nconst Row: React.FC<RowPropsType> = ({title, inputName, element, ...props}) => {\n    return <div className=\"profile__data-row data-form__row\">\n                <div className=\"profile__data-title\">{title}:</div>\n                <Field \n                    name={inputName}\n                    component={element}\n                    className=\"profile__data-descr profile__data-field\"\n                    {...props} />\n           </div>\n}\n\n\nconst ProfileDataReduxForm = reduxForm<ProfileDataFormValuesType, FormOwnPropsType>({form: \"profileData\"})(ProfileDataForm)\n\n\nexport default ProfileDataReduxForm\n\n\n\ntype FormOwnPropsType = {\n    user: ProfileType\n    onSubmit: (formData: ProfileType) => void\n    turnOffEditMode: () => void\n}\n\ntype ProfileDataFormValuesType = ProfileType\n\ntype RowPropsType = {\n    title: string\n    inputName: string\n    type?: string\n    element?: React.FC<CustomFieldProps> | string\n}","import React from 'react'\nimport { ProfileContactsType, ProfileType } from '../../../../../types/types'\n\n\nconst ProfileDataTable: React.FC<PropsType> = (props) => {\n\n    const {isOwner, setEditMode, user: {contacts, aboutMe, lookingForAJob, lookingForAJobDescription}} = props\n\n    const contactsList = Object.keys(contacts).map( key => {\n        if (contacts[key as keyof ProfileContactsType]) {\n            return <Row key={key} title={key} data={contacts[key as keyof ProfileContactsType]} isLink />\n        }\n        return null;\n    })\n\n    return (\n        <>  \n            {aboutMe && <Row title=\"About me\" data={aboutMe} />}\n            {lookingForAJobDescription && <Row title=\"My skills\" data={lookingForAJobDescription} />}\n            {lookingForAJob && <div className=\"profile__data-descr\">Looking for a job!</div>}\n            {contactsList}\n            {isOwner && <button className=\"profile__data-btn\" onClick={setEditMode} >Change data</button>}\n        </>\n    )\n}\n\n\nconst Row: React.FC<RowPropsType> = ({title, data, isLink}) => {\n    let link = `http://${data}`\n    if (data && /^http/im.test(data)) {\n        link = data\n    }\n    return (\n        <div className=\"profile__data-row\">\n            <div className=\"profile__data-title\">{title}:</div>\n            {isLink \n                ? <a className=\"profile__data-link\" target=\"_blank\" rel=\"noreferrer\" href={link}>{data}</a>\n                : <div className=\"profile__data-descr\">{data}</div>}\n        </div>\n    )\n}\n\n\nexport default ProfileDataTable\n\n\n\ntype PropsType = {\n    isOwner: boolean\n    user: ProfileType\n    setEditMode: () => void\n}\n\ntype RowPropsType = {\n    title: string\n    data: string | undefined\n    isLink?: boolean\n}","import React, {useState} from 'react'\nimport ProfileStatus from './profileStatus'\nimport ProfileDataForm from './profileDataForm'\nimport ProfileDataTable from './profileDataTable'\nimport {ProfileType} from '../../../../../types/types'\nimport MessagesBtn from '../../../../common/buttons/messagesBtn/messagesBtn'\nimport FollowBtn from '../../../../common/buttons/followBtn/followBtn'\nimport { useSelector } from 'react-redux'\nimport * as profileSelectors from '../../../../../selectors/profile'\n\n\nconst ProfileData: React.FC<ProfileDataPropsType> = ({isOwner, user, updateProfileData}) => {\n    \n    return (\n        <div className=\"profile__data\">\n            { !isOwner && <ProfileButtons userId={user.userId}/> }\n\n            <h1 className=\"page__name\">{user.fullName}</h1>\n\n            <ProfileStatus isOwner={isOwner} />\n\n            <ProfileDataList \n                isOwner={isOwner}\n                user={user}\n                updateProfileData={updateProfileData}/>\n        </div>\n    )\n}\n\n\nconst ProfileButtons: React.FC<ProfileButtonsPropsType> = ({userId}) => {\n\n    const profileFollowedInfo = useSelector(profileSelectors.getSelectedProfileFollowedInfo)\n\n    return (\n        <div className=\"profile__buttons-wrapper\">\n            <FollowBtn isFollowed={profileFollowedInfo.followedStatus} userId={profileFollowedInfo.userId} />\n            <MessagesBtn linkTo={`/dialogs/${userId}`} />\n        </div>\n    )\n}\n\nconst ProfileDataList: React.FC<ProfileDataListPropsType> = ({isOwner, user, updateProfileData}) => { \n    \n    const [dataVisibility, toggleDataVisibility] = useState(false)\n    const [editMode, setEditMode] = useState(false)\n    \n    const onProfileDataSubmit = (formData: ProfileType) => {\n        // todo: remove then\n        updateProfileData(formData).then( () => {\n            setEditMode(false);\n        })\n    }\n\n    const displayedDataContent = editMode \n        ? <ProfileDataForm\n            initialValues={user} \n            onSubmit={onProfileDataSubmit} \n            user={user}\n            turnOffEditMode={() => setEditMode(false)} />\n        : <ProfileDataTable \n            user={user}\n            isOwner={isOwner}\n            setEditMode={() => setEditMode(true)} />\n    \n    return (\n        <>\n            <button onClick={() => toggleDataVisibility(!dataVisibility)} className=\"view-data__btn\">\n                { dataVisibility ? \"Hide Profile Info\" : \"Show Profile Info\" }\n            </button>\n\n            {dataVisibility\n                &&  <div className=\"profile__data-list\">\n                        {displayedDataContent}\n                    </div> }\n        </>\n    )\n}\n\nexport default ProfileData\n\n\n\ntype ProfileDataPropsType = {\n    user: ProfileType\n    isOwner: boolean\n    updateProfileData: (formData: ProfileType) => Promise<any>\n}\n\ntype ProfileButtonsPropsType = {\n    userId: number\n}\n\ntype ProfileDataListPropsType = {\n    user: ProfileType\n    isOwner: boolean\n    updateProfileData: (formData: ProfileType) => Promise<any>\n}","import React from 'react'\nimport ProfileImages from './profileImages'\nimport ProfileData from './profileData'\nimport { ProfileType} from '../../../../../types/types'\n\nimport './profileInfo.scss'\n\n\nconst ProfileInfo: React.FC<PropsType> = ({user, isOwner, updateProfileData}) => {\n    \n    return (\n        <div className=\"profile__info\">\n            <ProfileImages \n                isOwner={isOwner}\n                userCover={user.photos.large}\n                userPhoto={user.photos} />\n\n            <ProfileData\n                isOwner={isOwner}\n                user={user}\n                updateProfileData={updateProfileData}\n                 />\n        </div>\n    )\n}\n\n\nexport default ProfileInfo\n\n\n\ntype PropsType = {\n    user: ProfileType\n    isOwner: boolean\n    updateProfileData: (formData: ProfileType) => Promise<any>\n}","import React, { useEffect, useRef } from 'react'\nimport PostsTimline from './postsTimeline'\nimport Spinner from '../../../common/spinner'\nimport { ProfileType } from '../../../../types/types'\nimport ProfileInfo from './profileInfo/profileInfo'\nimport { useSelector } from 'react-redux'\nimport * as profileSelectors from '../../../../selectors/profile'\n\nimport './profilePage.scss'\n\n\nconst ProfilePage: React.FC<PropsType> = ({isOwner, updateProfileData }) => {\n    \n    const topAnchor = useRef<HTMLDivElement>(null)\n    const selectedProfile = useSelector(profileSelectors.getSelectedProfile)\n\n    useEffect( () => {\n        topAnchor.current?.scrollIntoView({block: 'start', behavior: 'smooth'}) // todo: need to fix (change top element)\n    }, [selectedProfile])\n\n    if (!selectedProfile) {\n        return <Spinner />\n    }\n\n    return (\n        <>\n            <div className=\"page-top-anchor\" ref={topAnchor}></div>\n            <div className=\"profile__page\">  \n                <ProfileInfo  user={selectedProfile} isOwner={isOwner} updateProfileData={updateProfileData} />\n                <PostsTimline isOwner={isOwner}/>\n                <span className=\"section-hardcoded\">Section Hardcoded</span>\n            </div>\n        </>\n    )\n}\n\nexport default ProfilePage\n\n\n\ntype PropsType = {\n    isOwner: boolean\n    updateProfileData: (formData: ProfileType) => Promise<any>\n}","import React, {Component} from 'react'\nimport {compose} from 'redux'\nimport {withRouter, Redirect, RouteComponentProps} from 'react-router-dom'\nimport {connect} from 'react-redux'\nimport {getUserProfile, getProfileStatus, actions, requestProfileFollowedInfo, updateProfileData} from '../../../../reducers/profileReducer'\nimport ProfilePage from './profilePage'\nimport { AppStateType } from '../../../../reduxStore'\nimport { ProfileType, UserType } from '../../../../types/types'\nimport Spinner from '../../../common/spinner'\n\n\nclass ProfilePageContainer extends Component<PropsType> {\n\n    componentDidMount() { \n        this.refreshProfile()\n    }\n\n    componentDidUpdate(prevProps: PropsType) {\n        if (prevProps.match.params.userId !== this.props.match.params.userId) {\n            this.refreshProfile()\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.setUserProfile(null)\n    }\n\n    refreshProfile() {\n        let userId\n        if (this.props.match.params.userId) {\n            userId = +this.props.match.params.userId\n        }\n        if(!userId) {\n            userId = this.props.authUserId\n        }\n        if (!userId) {\n            console.error(\"Id should exists in URI params or in state(authUserId)\")\n        } else {\n            this.props.getUserProfile(userId)\n            this.props.getProfileStatus(userId)\n            this.props.requestProfileFollowedInfo(userId)\n        }\n    }\n\n    render() {\n        if (!this.props.match.params.userId && !this.props.isUserAuthorized) {\n            return <Redirect to=\"/login\" />\n        }\n\n        if (this.props.isLoading) return <Spinner />\n\n        return (\n            <ProfilePage \n                isOwner={!this.props.match.params.userId || +this.props.match.params.userId === this.props.authUserId}\n                updateProfileData={this.props.updateProfileData} />\n        )\n    }\n}\n\n\nconst mapStateToProps = (state: AppStateType) => {\n    return {\n        isUserAuthorized: state.auth.isAuthorized,\n        isLoading: state.profilePage.isLoading,\n        authUserId: state.auth.id\n    }\n}\n\nconst mapDispatchToProps = {\n    getUserProfile,\n    getProfileStatus,\n    requestProfileFollowedInfo,\n    updateProfileData,\n    setUserProfile: actions.profileReceived\n}\n\n\nexport default compose<React.ComponentType>(\n                    withRouter,\n                    connect(mapStateToProps, mapDispatchToProps)\n)(ProfilePageContainer)\n\n\n\ntype MapStatePropsType = {\n    isUserAuthorized: boolean\n    isLoading: boolean\n    authUserId: number\n}\n\ntype MapDispatchPropsType = {\n    getUserProfile: (userId: number) => void\n    getProfileStatus: (userId: number) => void\n    requestProfileFollowedInfo: (userId: number) => void\n    setUserProfile: (user: UserType | null) => void\n    updateProfileData: (formData: ProfileType) => Promise<any>\n}\n\ntype PathParamsType = {\n    userId: string | undefined\n}\n\ntype PropsType = MapStatePropsType & MapDispatchPropsType & \nRouteComponentProps<PathParamsType>","import ProfilePageContainer from './profilePageContainer';\n\nexport default ProfilePageContainer;","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { defaultPhoto } from '../../../../../assets/images'\nimport { AllDialogsListItemType } from '../../../../../services/dialogsAPI'\nimport Moment from 'react-moment'\n\n\nconst DialogsListItem: React.FC<PropsType> = ({dialogsItem}) => {\n\n    const {id, photos, userName, lastUserActivityDate, hasNewMessages,\n        newMessagesCount, lastDialogActivityDate} = dialogsItem\n    const style = dialogsItem.hasNewMessages ? \"dialogs__list-item_new\" : \"dialogs__list-item\"\n\n    return (\n        <li>\n            <Link className={style} to={`/dialogs/${id}`}>\n                <div className=\"dialog__image\">\n                    <img src={photos.small || defaultPhoto} alt=\"user_image\" />\n                </div>\n                <div className=\"dialog__content\">\n                    <div className=\"dialog__content-title\">\n                        {`${userName} `}\n                    </div>\n                    <div className=\"dialog__content-subtitle\">\n                        (last seen&#160;\n                            <Moment fromNow date={lastUserActivityDate} />\n                            )\n                    </div>\n                    \n                    <div className=\"dialog__content-message\">\n                        {hasNewMessages \n                            ? `There are ${newMessagesCount} new messages` \n                            : <span>Last opened on<Moment format=\" MMM DD YYYY hh:mm\" date={lastDialogActivityDate} /></span>}\n                    </div>\n                </div>\n            </Link>\n        </li>\n    )\n}\n\n\nexport default DialogsListItem\n\n\n\ntype PropsType = {\n    dialogsItem: AllDialogsListItemType\n}","import UsersPage from './usersPage';\n\nexport default UsersPage;","import React from 'react'\nimport { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { requestAllDialogsList } from '../../../../../reducers/dialogsReducer'\nimport Spinner from '../../../../common/spinner'\nimport DialogsListItem from './dialogsListItem'\nimport * as dialogsSelectors from '../../../../../selectors/dialogs'\n\nimport './dialogsList.scss'\n\n\nconst DialogsList: React.FC = () => {\n    \n    const dialogsList = useSelector(dialogsSelectors.getDialogsList)\n    const isLoading = useSelector(dialogsSelectors.getIsLoading)\n    const dispatch = useDispatch()\n    \n    useEffect( () => {\n        dispatch( requestAllDialogsList() )\n    }, [])\n\n    return (\n        <div className=\"dialogs__wrapper\">\n            <ul className=\"dialogs__list\">\n                {isLoading ? <Spinner /> : dialogsList.map((d) => <DialogsListItem dialogsItem={d} key={d.id} />)}\n            </ul>\n        </div>\n    )\n}\n\n\nexport default DialogsList","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport RequestError from '../../../../common/errors/requestError'\nimport SendMessageForm from '../../../../common/messagesComponents/sendMessageForm'\nimport * as dialogsSelectors from '../../../../../selectors/dialogs'\n\n\nconst DialogForm: React.FC<DialogFormPropsType> = ({sendMessage}) => {\n\n    const sendingMessageError = useSelector(dialogsSelectors.getSendingMessageError)\n    \n    return (\n        <>\n            <SendMessageForm\n                fieldName=\"dialogMessage\"\n                btnDisabled={false}\n                sendMessage={sendMessage} />\n\n            {sendingMessageError && <RequestError errorMessage={sendingMessageError} />}\n        </>\n    )\n}\n\nexport default DialogForm\n\n\n\ntype DialogFormPropsType = {\n    sendMessage: (message: string) => void\n}","import React from 'react'\nimport {Link, useRouteMatch} from 'react-router-dom'\nimport DialogForm from './dialogForm'\nimport * as icons from '../../../../../assets/icons'\nimport './dialogsItem.scss'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useEffect } from 'react'\nimport { actions, requestDialogMessages, sendMessage } from '../../../../../reducers/dialogsReducer'\nimport MessagesList from '../../../../common/messagesComponents/messagesList'\nimport { defaultPhoto } from '../../../../../assets/images'\nimport { ProfileType } from '../../../../../types/types'\nimport RequestError from '../../../../common/errors/requestError'\nimport * as dialogsSelectors from '../../../../../selectors/dialogs'\nimport * as authSelectors from '../../../../../selectors/auth'\n\n\nconst DialogsItem: React.FC = () => {\n\n    const messages = useSelector(dialogsSelectors.getSelectedDialogMessages)\n    const interlocuter = useSelector(dialogsSelectors.getDialogInterlocuterProfile)\n    const isLoading = useSelector(dialogsSelectors.getIsLoading)\n    const requestingMessagesError = useSelector(dialogsSelectors.getRequestingMessagesError)\n    const authUserImg = useSelector(authSelectors.getAuthUserPhoto)\n\n\n    //pagination\n    const messagesPortionSize = 10\n\n\n   \n    const match = useRouteMatch<MatchParamsType>()\n    const dispatch = useDispatch()\n\n    const userId = Number(match.params.userId)\n\n\n\n    const sendDialogMessage = (message: string) => {\n        dispatch( sendMessage(userId, message) )\n    }\n    \n\n    useEffect( () => {\n        dispatch( requestDialogMessages(userId, 1, messagesPortionSize) )\n\n        return () => {\n            dispatch( actions.dialogMessagesCleaned() )\n            dispatch( actions.interlocuterProfileReceived(null) )\n        }\n    }, [])\n\n\n\n    if (requestingMessagesError) {\n        return (\n            <div className=\"dialogs__item\">\n                <RequestError errorMessage={requestingMessagesError} />\n            </div>\n        )\n    }\n    return (\n        <div className=\"dialogs__item\">\n            <DialogsItemHeader friend={interlocuter} />   \n            <MessagesList \n                dialogMessages={messages}\n                dialogMessagesPortionSize={messagesPortionSize}\n                isLoading={isLoading}\n                friendId={userId}\n                friendImg={interlocuter?.photos.small}\n                ownerImg={authUserImg} />\n\n            <DialogForm sendMessage={sendDialogMessage} />\n        </div>\n    )\n}\n\n\n\nconst DialogsItemHeader: React.FC<DialogHeaderPropsType> = ({friend}) => {\n\n    return (\n        <div className=\"dialogs__item-header\">\n            <Link className=\"go-back__link\" to=\"/dialogs\"> \n                <img className=\"go-back__icon\" src={icons.goBack} alt=\"go_back_icon\" />\n                <div className=\"go-back__text\">Go back</div>\n            </Link>\n\n            <Link className=\"interlocuter\" to={`/profile/${friend?.userId}`}>\n                <div className=\"interlocuter__image\">\n                    <img src={friend?.photos.small || defaultPhoto} alt=\"interlocuter_image\" />\n                </div>\n                <div className=\"interlocuter__name\">{friend?.fullName}</div>\n            </Link>\n        </div>\n    )\n}\n\n\nexport default DialogsItem\n\n\n\ntype MatchParamsType = {userId: string}\n\ntype DialogHeaderPropsType = {\n    friend: ProfileType | null\n}","import DialogsPage from './dialogsPage';\n\nexport default DialogsPage;","import React from 'react'\nimport DialogsList from './dialogsList/dialogsList'\nimport DialogsItem from './dialogsItem/dialogsItem'\nimport {withAnonUserRedirect} from '../../../HOCs/withRedirect'\nimport { Route, Switch } from 'react-router-dom'\n\n\nconst DialogsPage: React.FC = () => {\n    return (\n        <Switch >\n            <Route exact path=\"/dialogs\" component={DialogsList} />\n            <Route path=\"/dialogs/:userId\" component={DialogsItem} />\n        </Switch>\n    )\n}\n\nexport default withAnonUserRedirect(DialogsPage)","import NewsPage from './newsPage';\n\nexport default NewsPage;","import React from 'react'\nimport {withAnonUserRedirect} from '../../../HOCs/withRedirect'\n\nimport './newsPage.scss'\n\n\nconst NewsPage: React.FC = () => {\n    return (\n        <div className=\"section\">\n            News Page\n        </div>\n    )\n}\n\nexport default withAnonUserRedirect(NewsPage)","import MusicPage from './musicPage';\n\nexport default MusicPage;","import React from 'react'\nimport {withAnonUserRedirect} from '../../../HOCs/withRedirect'\n\nimport './musicPage.scss'\n\n\nconst MusicPage: React.FC = () => {\n    return (\n        <div className=\"section\">\n            Music Page\n        </div>\n    )\n}\n\n\nexport default withAnonUserRedirect(MusicPage)","import SettingsPage from './settingsPage';\n\nexport default SettingsPage;","import ChatPage from './chatPage'\n\nexport default ChatPage","import React from 'react'\nimport './settingsPage.scss'\nimport {withAnonUserRedirect} from '../../../HOCs/withRedirect'\n\n\nconst SettingsPage = () => {\n    return (\n        <div className=\"section\">\n            Settings Page\n        </div>\n    )\n}\n\nexport default withAnonUserRedirect(SettingsPage)","import PageNotFound from './pageNotFound';\n\nexport default PageNotFound;","import React from 'react'\nimport {NavLink} from 'react-router-dom'\n\nimport './pageNotFound.scss'\n\n\nconst PageNotFound: React.FC = () => {\n    return (\n        <div className=\"error__page-wrapper\">\n            <h2 className=\"error__page-title\">404 ERROR</h2>\n            <div className=\"error__page-descr\">Page not found</div>\n            <NavLink className=\"error__page-link\" to=\"/profile\">Go back to the main page</NavLink>\n        </div>\n    )\n}\n\nexport default PageNotFound","import React from 'react'\nimport {Route, Redirect, Switch} from 'react-router-dom'\nimport Spinner from '../../common/spinner'\nimport {ProfilePageContainer, DialogsPage, NewsPage, MusicPage, SettingsPage, LoginPage, PageNotFound} from '../pages'\n\nimport './mainSection.scss'\n\nconst UsersPage = React.lazy(() => import('../pages/usersPage/usersPage'))\nconst ChatPage = React.lazy(() => import('../pages/chatPage/chatPage'))\n// todo: React lazy does not cause splitting bundle in chunks\n// try this https://stackoverflow.com/questions/53186595/react-lazy-does-not-cause-splitting-bundle-in-chunks\n\n\nconst MainSection: React.FC = () => {\n    return (\n        <main className=\"main-section\">\n            <div className=\"section\">\n            <React.Suspense fallback={Spinner}>\n                <Switch>\n                    <Redirect exact from=\"/\" to=\"/profile\" />\n                    <Route path=\"/login\" component={LoginPage} />\n                    <Route path=\"/profile/:userId?\" component={ProfilePageContainer} />\n                    <Route path=\"/users\" component={UsersPage} />\n                    <Route path=\"/dialogs\" component={DialogsPage} />\n                    <Route path=\"/news\" component={NewsPage} />\n                    <Route path=\"/music\" component={MusicPage} />\n                    <Route path=\"/chat\" component={ChatPage} />\n                    <Route path=\"/settings\" component={SettingsPage} />\n                    <Route path=\"*\" component={PageNotFound} />\n                </Switch>\n            </React.Suspense>\n            </div>\n        </main>\n    )\n}\n\nexport default MainSection","import MainSection from './mainSection';\n\nexport default MainSection;","import Footer from './footer';\n\nexport default Footer;","import React from 'react';\n\nimport './footer.scss';\n\nconst Footer = () => {\n    return (\n        <footer className=\"footer\">\n            Сreated for educational purposes © <a href=\"http://karpeyev.ru\" className=\"author-link\">insane4L</a>\n        </footer>\n    )\n}\n\n\nexport default Footer;","import React from \"react\"\nimport Header from \"./header\"\nimport SideBar from \"./sideBar\"\nimport MainSection from \"./mainSection\"\nimport Footer from './footer'\nimport {connect} from 'react-redux'\nimport {actions, initializeApp} from '../../reducers/appReducer'\nimport Spinner from '../common/spinner'\nimport { AppStateType } from \"../../reduxStore\"\n\nimport \"./app.scss\"\n\n\nclass App extends React.Component<PropsType> {\n\n    componentDidMount() {\n        this.props.initializeApp();\n        //handle all unhandled with \"catch\" errors\n        window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors)\n    }\n\n    componentWillUnmount() {\n        //remove because of side effect in global\n        window.removeEventListener('unhandledrejection', this.catchAllUnhandledErrors)\n    }\n\n    catchAllUnhandledErrors = () => {\n        this.props.unhandledErrorCatched(true)\n    }\n\n    render() {\n      \n        if (!this.props.appInitialized) return <Spinner />\n\n        return (\n            <div className=\"app__wrapper\">\n                <Header />\n                <div className=\"container page__layout\">\n                    <SideBar />\n                    <MainSection />\n                </div>\n                <Footer />\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state: AppStateType) => ({appInitialized: state.app.appInitialized})\n\nexport default connect(mapStateToProps, {initializeApp, unhandledErrorCatched: actions.unhandledErrorCatched})(App)\n\n\n\ntype PropsType = {\n    appInitialized: boolean\n    initializeApp: () => Promise<void>\n    unhandledErrorCatched: (error: boolean) => void\n}","import App from './app';\n\nexport default App;","import {createStore, combineReducers, applyMiddleware, compose, Action} from 'redux'\nimport thunkMiddleware, { ThunkAction } from 'redux-thunk'\n\nimport profileReducer from './reducers/profileReducer'\nimport dialogsReducer from './reducers/dialogsReducer'\nimport usersReducer from './reducers/usersReducer'\nimport authReducer from './reducers/authReducer'\nimport {reducer as formReducer} from 'redux-form'\nimport appReducer from './reducers/appReducer'\nimport chatReducer from './reducers/chatReducer'\n\n\n\nconst rootReducer = combineReducers({\n    dialogsPage: dialogsReducer,\n    profilePage: profileReducer,\n    usersPage: usersReducer,\n    app: appReducer,\n    auth: authReducer,\n    form: formReducer,\n    chat: chatReducer\n})\n\ntype RootReducerType = typeof rootReducer\nexport type AppStateType = ReturnType<RootReducerType>\n\n\n// type PropertiesTypes<T> = T extends {[key: string]: infer U} ? U : never\n// export type InferActionsTypes<T extends {[key: string]: (...args: any[]) => any}> =ReturnType<PropertiesTypes<T>>\nexport type InferActionsTypes<T> = T extends {[key: string]: (...args: any[]) => infer U} ? U : never\n\n\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\n\n\n\n// options for Redux DevTools (chrome extention)\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)))\n\n// without support Redux DevTools\n// const store = createStore(reducers, applyMiddleware(thunkMiddleware));\n\n// @ts-ignore\nwindow.store = store\nexport default store","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {HashRouter as Router} from 'react-router-dom'\nimport App from './components/app'\nimport store from './reduxStore'\nimport {Provider} from 'react-redux'\n\nimport './sassStyles/_global.scss'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n)","import React from 'react'\nimport {Link} from 'react-router-dom'\nimport { defaultPhoto } from '../../../assets/images'\n\nimport './userAvatar.scss'\n\n\nconst UserAvatar: React.FC<UserAvatarPropsType & React.HTMLAttributes<HTMLDivElement>> = ({userImage, linkTo, className}) => {\n    return (\n        <Link className={className} to={linkTo}>\n            <div className=\"user__component-avatar\">\n                <img className=\"user__component-avatar-img\" src={userImage || defaultPhoto} alt=\"user_image\" />\n            </div>\n        </Link>\n    )\n}\n\nexport default UserAvatar\n\n\n\ntype UserAvatarPropsType = {\n    linkTo: string\n    className: string\n    userImage: string | null | undefined\n}","import {AppStateType} from '../reduxStore'\n\nexport const getAuthUserId = (state: AppStateType) => {\n    return state.auth.id\n}\n\nexport const getIsAuthorized = (state: AppStateType) => {\n    return state.auth.isAuthorized\n}\n\nexport const getLogin = (state: AppStateType) => {\n    return state.auth.login\n}\n\nexport const getAuthUserPhoto = (state: AppStateType) => {\n    return state.auth.authUserPhoto\n}","import React from 'react'\nimport {Link} from 'react-router-dom'\n\n\nconst UserName: React.FC<UserNamePropsType> = ({linkTo, userName, className}) => {\n    return (\n        <Link className={className} to={linkTo} >\n            <div className=\"user__component-name\">\n                {userName}\n            </div>\n        </Link>\n    )\n}\n\nexport default UserName\n\n\n\ntype UserNamePropsType = {\n    linkTo: string\n    userName: string | undefined\n    className: string\n}","import { ChatMessageType } from \"../types/types\"\n\nlet subscribers = {\n    'messages-received': [] as MessagesSubscribersType[],\n    'status-changed': [] as StatusSubscribersType[]\n} \n\nlet ws: WebSocket | null = null\n\nconst closeHandler = () => {\n    notifySubscribersAboutStatus('pending')\n    setTimeout(createChannel, 4000)\n}\nconst messageHandler =  (e: MessageEvent) => {\n    const newMessages = JSON.parse(e.data)\n    subscribers[\"messages-received\"].forEach(s => s(newMessages) )\n}\nconst openHandler =  () => {\n    notifySubscribersAboutStatus('ready')\n}\nconst errorHandler =  () => {\n    notifySubscribersAboutStatus('error')\n}\n\nconst notifySubscribersAboutStatus = (status: WSStatusType) => {\n    subscribers[\"status-changed\"].forEach(s => s(status))\n}\n\nconst cleanUp = () => {\n    ws?.removeEventListener('close', closeHandler)\n    ws?.removeEventListener('message', messageHandler)\n    ws?.removeEventListener('open', openHandler)\n    ws?.removeEventListener('error', errorHandler)\n    ws?.close()\n}\nfunction createChannel() {\n    cleanUp()\n    ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\n    notifySubscribersAboutStatus('pending')\n    ws.addEventListener('close', closeHandler)\n    ws.addEventListener('message', messageHandler)\n    ws.addEventListener('open', openHandler)\n    ws.addEventListener('error', errorHandler)\n}\n\n\nexport const chatAPI = {\n    start() {\n        createChannel()\n    },\n    stop() {\n        subscribers[\"messages-received\"] = []\n        subscribers[\"status-changed\"] = []\n        cleanUp()\n    },\n    subscribe(event: EventsTypes, callback: SubscribersTypes) {\n        // @ts-ignore\n        subscribers[event].push(callback)\n    },\n    unsubscribe(event: EventsTypes, callback: SubscribersTypes) {\n        // @ts-ignore\n        subscribers[event] = subscribers[event].filter(s => s !== callback)\n    },\n    sendMessage(message: string) {\n        ws?.send(message)\n    }\n}\n\n\n\nexport type WSStatusType = 'pending' | 'ready' | 'error'\n\ntype MessagesSubscribersType = (messages: ChatMessageType[]) => void\ntype StatusSubscribersType = (status: WSStatusType) => void\ntype SubscribersTypes = MessagesSubscribersType | StatusSubscribersType\ntype EventsTypes = 'messages-received' | 'status-changed'","import { Dispatch } from \"redux\"\nimport { BaseThunkType, InferActionsTypes } from \"../reduxStore\"\nimport { chatAPI, WSStatusType } from \"../services/chatAPI\"\nimport { ChatMessageType } from \"../types/types\"\n\n\n\nconst initialState = {\n    messages: [] as ChatMessageType[],\n    status: 'pending' as WSStatusType\n}\n\n\nconst chatReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\n    switch(action.type) {\n        case 'sn/CHAT/MESSAGES_RECEIVED':\n            return {\n                ...state,\n                messages: [...state.messages, ...action.payload.messages].filter((m, index, array) => index >= (array.length - 100))\n            }\n        case 'sn/CHAT/STATUS_CHANGED':\n            return {\n                ...state,\n                status: action.payload.status\n            }\n        case 'sn/CHAT/MESSAGES_CLEANED':\n            return {\n                ...state,\n                messages: []\n            }\n        default:\n            return state\n    }\n}\n\nexport const actions = {\n    messagesReceived: (messages: ChatMessageType[]) => (\n        {type: 'sn/CHAT/MESSAGES_RECEIVED', payload: {messages}} as const\n    ),\n    statusChanged: (status: WSStatusType) => (\n        {type: 'sn/CHAT/STATUS_CHANGED', payload: {status}} as const\n    ),\n    messagesCleaned: () => (\n        {type: 'sn/CHAT/MESSAGES_CLEANED'} as const\n    )\n\n}\n\n\n\n\nlet _newMessageHandler: ((messages: ChatMessageType[]) => void) | null = null // because need exactly that link when subscriber unsubscribes\nconst newMessageHandlerCreator = (dispatch: Dispatch) => {\n    if (_newMessageHandler === null) {\n        _newMessageHandler = (messages) => {\n            dispatch( actions.messagesReceived(messages) )\n        }\n    }\n    return _newMessageHandler\n}\n\nlet _statusChangedHandler: ((status: WSStatusType) => void) | null = null // because need exactly that link when subscriber unsubscribes\nconst statusChangedHandlerCreator = (dispatch: Dispatch) => {\n    if (_statusChangedHandler === null) {\n        _statusChangedHandler = (status) => {\n            dispatch( actions.statusChanged(status) )\n        }\n    }\n    return _statusChangedHandler\n}\n\nexport const startMessagesListening = ():BaseThunkType<ActionsTypes> => async (dispatch) => {\n    chatAPI.start()\n    chatAPI.subscribe('messages-received', newMessageHandlerCreator(dispatch))\n    chatAPI.subscribe('status-changed', statusChangedHandlerCreator(dispatch))\n}\n\nexport const stopMessagesListening = ():BaseThunkType<ActionsTypes> => async (dispatch) => {\n    chatAPI.unsubscribe('messages-received', newMessageHandlerCreator(dispatch))\n    chatAPI.unsubscribe('status-changed', statusChangedHandlerCreator(dispatch))\n    chatAPI.stop()\n}\n\n\nexport const sendMessage = (message: string):BaseThunkType<ActionsTypes> => async (dispatch) => {\n    chatAPI.sendMessage(message)\n}\n\nexport default chatReducer\n\n\ntype InitialStateType = typeof initialState\ntype ActionsTypes = InferActionsTypes<typeof actions>","import axios from 'axios';\n\nexport const apiBase = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    headers: {\n        \"API-KEY\": \"e88bb7e6-af23-49e2-8781-5099f9ee4dd5\"\n    }\n})\n\n\n\nexport enum ResultCodesEnum {\n    Success = 0,\n    Error = 1\n}\nexport enum ResultCodeForCaptchaEnum {\n    CaptchaIsRequired = 10\n}\n\nexport type ResponseType<D = {}, RC = ResultCodesEnum> = {\n    data: D\n    resultCode: RC\n    messages: Array<string>\n}\n","import { Link } from \"react-router-dom\"\n\n\nconst MessagesBtn: React.FC<MessagesBtnPropsType> = ({linkTo}) => {\n    return (\n        <Link to={linkTo} className=\"user__messages-btn\">Write message</Link>\n    )\n}\n\nexport default MessagesBtn\n\n\n\ntype MessagesBtnPropsType = {\n    linkTo: string\n}","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { followOrUnfollow } from '../../../../reducers/usersReducer'\nimport * as usersSelectors from '../../../../selectors/users'\n\nimport '../buttons.scss'\n\n\nconst FollowBtn: React.FC<FollowBtnPropsType> = ({isFollowed, userId}) => {\n\n    const followingInProgress = useSelector(usersSelectors.getFollowingInProgress)\n    const btnLabel = isFollowed ? 'Unfollow' : isFollowed === false ? 'Follow' : ''\n    const btnStyle = isFollowed ? 'user__follow-btn unfollow-btn' : 'user__follow-btn'\n    const dispatch = useDispatch()\n\n    const followUnfollow = (userId: number) => {\n        dispatch( followOrUnfollow(userId) )\n    }\n\n    if (isFollowed === null || !userId) return <div></div> // todo: fix on profile page when user refreshed + remove user from friends block (useEffect)\n    \n    return (\n        <button \n            className={btnStyle}\n            disabled={followingInProgress.some(id => id === userId)}\n            onClick={() => followUnfollow(userId)} >\n        {btnLabel}\n        </button>\n    )\n}\n\nexport default FollowBtn\n\n\n\ntype FollowBtnPropsType = {\n    isFollowed: boolean | null\n    userId: number | null\n}","import React, { FormEvent, KeyboardEvent, useState } from 'react'\n\nimport './sendMessageForm.scss'\n\n\nconst SendMessageForm: React.FC<SendMessagePropsType> = ({fieldName, btnDisabled, sendMessage}) => {\n\n    const [message, setMessage] = useState('')\n\n    const sendMessageHandler = (e?: FormEvent<HTMLFormElement>) => {\n        e?.preventDefault()\n        if (!message) {\n            return\n        }\n        sendMessage(message)\n        setMessage('')\n    }\n\n    const onEnterPress = (e: KeyboardEvent<HTMLTextAreaElement>) => {\n        if(e.key === 'Enter' && e.shiftKey === false) {\n            e.preventDefault();\n            sendMessageHandler()\n        }\n    }\n\n    return (\n        <form onSubmit={sendMessageHandler} className=\"send-message__form\" >\n            <textarea \n                name={fieldName}\n                className=\"send-message__input\"\n                placeholder=\"Type new message here..\"\n                autoComplete=\"off\"\n                value={message}\n                onChange={(e) => setMessage(e.currentTarget.value)}\n                onKeyDown={onEnterPress} />\n\n            <button disabled={btnDisabled || !message} className=\"send-message__btn\">Send Message</button>\n        </form>\n    )\n}\n\nexport default SendMessageForm\n\n\n\ntype SendMessagePropsType = {\n    fieldName: string\n    btnDisabled: boolean\n    sendMessage: (message: string) => void\n}","import React from 'react'\nimport { ChatMessageType } from '../../../../types/types'\nimport UserAvatar from '../../../common/userAvatar/userAvatar'\nimport UserName from '../../../common/userName/userName'\n\nimport '../../../common/messagesComponents/message.scss'\n\n\nconst ChatMessage: React.FC<MessagePropsType> = React.memo( ({message, isOwnerMessage}) => {\n    \n    const style = isOwnerMessage ? \"message_owner\" : \"message_friend\"\n\n    return (\n        <div className={`message ${style}`}>\n            <div className=\"message__info\">\n                <UserAvatar className=\"message__author-image\" userImage={message.photo} linkTo={`/profile/${message.userId}`} />\n                <UserName className=\"message__author-name\" userName={message.userName} linkTo={`/profile/${message.userId}`} />\n                {/* <div className=\"message__date\">22.05.2021</div> todo: there are no dates in the chat message https://social-network.samuraijs.com/api */}\n            </div>\n            <div className=\"message__text\">{message.message}</div>\n        </div>\n    )\n})\n\nexport default ChatMessage\n\n\n\ntype MessagePropsType = {\n    message: ChatMessageType\n    isOwnerMessage: boolean\n}","import React, { useState } from 'react'\nimport Moment from 'react-moment'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { actions, requestMessageStatus } from '../../../../../reducers/dialogsReducer'\nimport { DialogMessageType } from '../../../../../services/dialogsAPI'\nimport RequestError from '../../../../common/errors/requestError'\nimport UserAvatar from '../../../../common/userAvatar/userAvatar'\nimport UserName from '../../../../common/userName/userName'\nimport * as dialogsSelectors from '../../../../../selectors/dialogs'\n\nimport '../../../../common/messagesComponents/message.scss'\n\n\nconst DialogMessage: React.FC<MessagePropsType> = React.memo( ({message, isOwnerMessage, friendImg, ownerImg}) => {\n\n    const [statusDisplay, setStatusDisplay] = useState(false)\n    const dispatch = useDispatch()\n    const style = isOwnerMessage ? \"message_owner\" : \"message_friend\"\n   \n\n    const viewMessageActualStatus = () => {\n        if (message.viewed === true) {\n            dispatch( actions.setRequestError({messageStatusRequestError: null}) )\n            dispatch( actions.addMessageToViewed(message.id) ) // add to viewed arr, because of arr.some() --- \"Has been VIEWED\"\n            showStatus(4)\n        }\n        if (message.viewed === false) { // if message initial viewed false, request API actual status\n            dispatch( requestMessageStatus(message.id) ) \n            showStatus(4)\n        }\n    }\n    const showStatus = (seconds: number) => {\n        const milliseconds = seconds * 1000\n        setStatusDisplay(true)\n        const timerId = setTimeout(() => { setStatusDisplay(false) }, milliseconds)\n    }\n\n    return (\n        <>\n            <div className={`message ${style}`}>\n                <div className=\"message__info\">\n                    <UserAvatar className=\"message__author-image\" userImage={isOwnerMessage ? ownerImg : friendImg} linkTo={`/profile/${message.senderId}`} />\n                    <UserName className=\"message__author-name\" userName={message.senderName} linkTo={`/profile/${message.senderId}`} />\n                    <div className=\"message__date\"><Moment format=\"MMM DD YYYY hh:mm\" date={message.addedAt} /></div>\n                </div>\n                <div className=\"message__text\" id=\"dialog__message-text\">{message.body}</div>\n                {isOwnerMessage && !statusDisplay && <div className=\"check-status__btn\" onClick={viewMessageActualStatus}>Check status</div>}\n                {statusDisplay && <MessageStatus messageId={message.id} />}\n            </div>\n        </>\n    )\n})\n\n\nconst MessageStatus: React.FC<{messageId: string}> = ({messageId}) => {\n    const viewedMessages = useSelector(dialogsSelectors.getViewedMessages)\n    const MessageStatusRequestError = useSelector(dialogsSelectors.getMessageStatusRequestError)\n    \n    if (MessageStatusRequestError) {\n        return <div className=\"message__status\">\n            <RequestError errorMessage={MessageStatusRequestError} />\n        </div>\n    }\n\n    return (\n        <div className=\"message__status\">\n            { viewedMessages.some(id => id === messageId) \n                ? \"Viewed\" \n                : \"Not viewed\" }\n        </div>\n        \n    )\n}\n\nexport default DialogMessage\n\n\n\ntype MessagePropsType = {\n    message: DialogMessageType\n    friendImg: string | null | undefined\n    isOwnerMessage: boolean\n    ownerImg: string | null | undefined\n}","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { requestDialogMessages } from '../../../../../reducers/dialogsReducer'\nimport * as dialogsSelectors from '../../../../../selectors/dialogs'\n\n\nconst DialogPagination: React.FC<DialogPaginationPropsType> = ({userId, messagesPortionSize}) => {\n\n    const loadedMessagesCount = useSelector(dialogsSelectors.getLoadedMessagesCount)\n    const dialogMessagesCount = useSelector(dialogsSelectors.getSelectedDialogMessagesCount)\n    const portionsCount = Math.ceil(dialogMessagesCount / messagesPortionSize)\n    const viewedPortionsCount = Math.ceil(loadedMessagesCount / messagesPortionSize)\n    const oldMessagesPortionNumber =  viewedPortionsCount + 1\n\n    const dispatch = useDispatch()\n\n    const showOldMessages = () => {\n        if (userId) {\n            dispatch( requestDialogMessages(userId, oldMessagesPortionNumber, messagesPortionSize) )\n        }\n    }\n\n    return (\n        <>\n            {portionsCount > viewedPortionsCount\n                ? <div className=\"dialogs__item-pagination\" onClick={showOldMessages}>^^^</div>\n                : <span></span>\n            }\n        </>\n    )\n}\n\nexport default DialogPagination\n\n\n\ntype DialogPaginationPropsType = {\n    userId: number | undefined\n    messagesPortionSize: number\n}","import React, { useEffect, useRef, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport * as authSelectors from '../../../selectors/auth'\nimport { DialogMessageType } from '../../../services/dialogsAPI'\nimport { ChatMessageType } from '../../../types/types'\nimport ChatMessage from '../../app/pages/chatPage/chatMessage'\nimport DialogMessage from '../../app/pages/dialogsPage/dialogsItem/dialogMessage'\nimport DialogPagination from '../../app/pages/dialogsPage/dialogsItem/dialogPagination'\nimport Spinner from '../spinner'\n\nimport './messagesList.scss'\n\n\nconst MessagesList: React.FC<MessagesListPropsType> = ({chatMessages, dialogMessages, dialogMessagesPortionSize, isLoading, friendId, friendImg, ownerImg}) => {\n\n    const propsMessages = chatMessages || dialogMessages\n\n    const [isAutoScroll, setIsAutoScroll] = useState(true)\n    const messagesAnchor = useRef<HTMLDivElement>(null)\n    const authUserId = useSelector(authSelectors.getAuthUserId)\n\n    const scrollHandler = (e: React.UIEvent<HTMLElement>) => {\n        const element = e.currentTarget\n        if (Math.abs( (element.scrollHeight - element.scrollTop) - element.clientHeight ) < 300)  {\n            !isAutoScroll && setIsAutoScroll(true)\n        } else {\n            isAutoScroll && setIsAutoScroll(false)\n        }\n    }\n\n    useEffect( () => {\n        if (isAutoScroll) {\n            messagesAnchor.current?.scrollIntoView({block: 'end', behavior: 'smooth'})\n        }\n        // eslint-disable-next-line\n    }, [propsMessages])\n\n\n    let MessagesList\n    if (chatMessages) {\n        MessagesList = chatMessages.map((message, index) => {\n            return <ChatMessage \n                        key={index} //todo: need generate id for key\n                        message={message} \n                        isOwnerMessage={message.userId === authUserId ? true : false} /> \n        })\n    } else {\n        MessagesList = dialogMessages?.map((message) => {\n            return <DialogMessage\n                        key={message.id} \n                        message={message} \n                        friendImg={friendImg}\n                        ownerImg={ownerImg}\n                        isOwnerMessage={message.senderId === authUserId ? true : false} />\n        })\n    }\n\n    return (\n        <div className=\"messages__list\" onScroll={scrollHandler}>\n            {!chatMessages && <DialogPagination messagesPortionSize={dialogMessagesPortionSize || 10} userId={friendId}/>}\n            {isLoading ? <Spinner/> : MessagesList}\n            <div ref={messagesAnchor}></div>\n        </div>\n    )\n}\n\nexport default MessagesList\n\n\n\ntype MessagesListPropsType = {\n    chatMessages?: ChatMessageType[]\n    dialogMessages?: DialogMessageType[]\n    dialogMessagesPortionSize?: number\n    friendId?: number\n    friendImg?: string | null | undefined\n    ownerImg?: string | null | undefined\n    isLoading: boolean\n}"],"sourceRoot":""}